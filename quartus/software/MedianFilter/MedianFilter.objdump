
MedianFilter.elf:     file format elf32-littlenios2
MedianFilter.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000020

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000026c memsz 0x0000026c flags r-x
    LOAD off    0x0000128c vaddr 0x0400028c paddr 0x04000294 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x0000129c vaddr 0x0400029c paddr 0x0400029c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04000020  04000020  00001294  2**0
                  CONTENTS
  2 .text         00000248  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  04000268  04000268  00001268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  0400028c  04000294  0000128c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0400029c  0400029c  0000129c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  040002a8  040002a8  00001294  2**0
                  CONTENTS
  7 .onchip_memory 00000000  08000000  08000000  00001294  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000168  00000000  00000000  000012b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000b2c  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000669  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000714  00000000  00000000  000025b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000190  00000000  00000000  00002ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000005dc  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000101  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000353c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000088  00000000  00000000  00003550  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000446e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00004471  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00004476  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00004477  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00004478  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00004480  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0000448d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00004496  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0000449f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000039  00000000  00000000  000044a7  2**0
                  CONTENTS, READONLY
 30 .jdi          00004652  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0029247b  00000000  00000000  00008b32  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000020 l    d  .text	00000000 .text
04000268 l    d  .rodata	00000000 .rodata
0400028c l    d  .rwdata	00000000 .rwdata
0400029c l    d  .bss	00000000 .bss
040002a8 l    d  .sdram_controller	00000000 .sdram_controller
08000000 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MedianFilter_bsp//obj/HAL/src/crt0.o
04000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
04000180 g     F .text	0000002c alt_main
04000294 g       *ABS*	00000000 __flash_rwdata_start
040001ac g     F .text	00000038 alt_putstr
04000290 g     O .rwdata	00000004 jtag_uart
04000244 g     F .text	00000008 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller
040002a0 g     O .bss	00000004 alt_argv
0400828c g       *ABS*	00000000 _gp
040002a8 g       *ABS*	00000000 __bss_end
0400023c g     F .text	00000004 alt_dcache_flush_all
04000294 g       *ABS*	00000000 __ram_rwdata_end
08000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0400028c g       *ABS*	00000000 __ram_rodata_end
040002a8 g       *ABS*	00000000 end
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000208 g     F .text	00000034 altera_avalon_jtag_uart_write
04000020 g     F .text	0000003c _start
04000204 g     F .text	00000004 alt_sys_init
0400028c g       *ABS*	00000000 __ram_rwdata_start
04000268 g       *ABS*	00000000 __ram_rodata_start
040002a8 g       *ABS*	00000000 __alt_stack_base
0400029c g       *ABS*	00000000 __bss_start
0400005c g     F .text	00000044 main
0400029c g     O .bss	00000004 alt_envp
04000268 g       *ABS*	00000000 __flash_rodata_start
040001e4 g     F .text	00000020 alt_irq_init
0400028c g     O .rwdata	00000004 sd
040002a4 g     O .bss	00000004 alt_argc
04000020 g       *ABS*	00000000 __ram_exceptions_start
04000294 g       *ABS*	00000000 _edata
040002a8 g       *ABS*	00000000 _end
04000020 g       *ABS*	00000000 __ram_exceptions_end
08000000 g       *ABS*	00000000 __alt_data_end
0400000c g       .entry	00000000 _exit
0400024c g     F .text	0000001c strlen
04000240 g     F .text	00000004 alt_icache_flush_all
040000a0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08400814 	ori	at,at,32
    jmp r1
 4000008:	0800683a 	jmp	at

0400000c <_exit>:
	...

Disassembly of section .text:

04000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000020:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000028:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400002c:	d6a0a314 	ori	gp,gp,33420
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000030:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000034:	1080a714 	ori	r2,r2,668

    movhi r3, %hi(__bss_end)
 4000038:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400003c:	18c0aa14 	ori	r3,r3,680

    beq r2, r3, 1f
 4000040:	10c00326 	beq	r2,r3,4000050 <_start+0x30>

0:
    stw zero, (r2)
 4000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400004c:	10fffd36 	bltu	r2,r3,4000044 <__alt_data_end+0xfc000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000050:	40000a00 	call	40000a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000054:	40001800 	call	4000180 <alt_main>

04000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000058:	003fff06 	br	4000058 <__alt_data_end+0xfc000058>

0400005c <main>:
 */

#include "sys/alt_stdio.h"
volatile char * sd = (char *) 0x2000;
int main()
{ 
 400005c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
 4000060:	01010034 	movhi	r4,1024
 */

#include "sys/alt_stdio.h"
volatile char * sd = (char *) 0x2000;
int main()
{ 
 4000064:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
 4000068:	21009a04 	addi	r4,r4,616
 400006c:	40001ac0 	call	40001ac <alt_putstr>

  /* Event loop never exits. */
  while (1){
	  alt_putstr("0x2000:");
 4000070:	01010034 	movhi	r4,1024
 4000074:	2100a004 	addi	r4,r4,640
 4000078:	40001ac0 	call	40001ac <alt_putstr>
	  alt_putstr(*sd);
 400007c:	d0a00017 	ldw	r2,-32768(gp)
 4000080:	11000003 	ldbu	r4,0(r2)
 4000084:	21003fcc 	andi	r4,r4,255
 4000088:	2100201c 	xori	r4,r4,128
 400008c:	213fe004 	addi	r4,r4,-128
 4000090:	40001ac0 	call	40001ac <alt_putstr>
	  alt_putstr(".\n");
 4000094:	01010034 	movhi	r4,1024
 4000098:	2100a204 	addi	r4,r4,648
 400009c:	003ff306 	br	400006c <__alt_data_end+0xfc00006c>

040000a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40000a0:	deffff04 	addi	sp,sp,-4
 40000a4:	01010034 	movhi	r4,1024
 40000a8:	01410034 	movhi	r5,1024
 40000ac:	dfc00015 	stw	ra,0(sp)
 40000b0:	2100a304 	addi	r4,r4,652
 40000b4:	2940a504 	addi	r5,r5,660

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40000b8:	2140061e 	bne	r4,r5,40000d4 <alt_load+0x34>
 40000bc:	01010034 	movhi	r4,1024
 40000c0:	01410034 	movhi	r5,1024
 40000c4:	21000804 	addi	r4,r4,32
 40000c8:	29400804 	addi	r5,r5,32
 40000cc:	2140121e 	bne	r4,r5,4000118 <alt_load+0x78>
 40000d0:	00000b06 	br	4000100 <alt_load+0x60>
 40000d4:	00c10034 	movhi	r3,1024
 40000d8:	18c0a504 	addi	r3,r3,660
 40000dc:	1907c83a 	sub	r3,r3,r4
 40000e0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 40000e4:	10fff526 	beq	r2,r3,40000bc <__alt_data_end+0xfc0000bc>
    {
      *to++ = *from++;
 40000e8:	114f883a 	add	r7,r2,r5
 40000ec:	39c00017 	ldw	r7,0(r7)
 40000f0:	110d883a 	add	r6,r2,r4
 40000f4:	10800104 	addi	r2,r2,4
 40000f8:	31c00015 	stw	r7,0(r6)
 40000fc:	003ff906 	br	40000e4 <__alt_data_end+0xfc0000e4>
 4000100:	01010034 	movhi	r4,1024
 4000104:	01410034 	movhi	r5,1024
 4000108:	21009a04 	addi	r4,r4,616
 400010c:	29409a04 	addi	r5,r5,616

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000110:	2140101e 	bne	r4,r5,4000154 <alt_load+0xb4>
 4000114:	00000b06 	br	4000144 <alt_load+0xa4>
 4000118:	00c10034 	movhi	r3,1024
 400011c:	18c00804 	addi	r3,r3,32
 4000120:	1907c83a 	sub	r3,r3,r4
 4000124:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000128:	10fff526 	beq	r2,r3,4000100 <__alt_data_end+0xfc000100>
    {
      *to++ = *from++;
 400012c:	114f883a 	add	r7,r2,r5
 4000130:	39c00017 	ldw	r7,0(r7)
 4000134:	110d883a 	add	r6,r2,r4
 4000138:	10800104 	addi	r2,r2,4
 400013c:	31c00015 	stw	r7,0(r6)
 4000140:	003ff906 	br	4000128 <__alt_data_end+0xfc000128>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000144:	400023c0 	call	400023c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 4000148:	dfc00017 	ldw	ra,0(sp)
 400014c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4000150:	40002401 	jmpi	4000240 <alt_icache_flush_all>
 4000154:	00c10034 	movhi	r3,1024
 4000158:	18c0a304 	addi	r3,r3,652
 400015c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000160:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000164:	18bff726 	beq	r3,r2,4000144 <__alt_data_end+0xfc000144>
    {
      *to++ = *from++;
 4000168:	114f883a 	add	r7,r2,r5
 400016c:	39c00017 	ldw	r7,0(r7)
 4000170:	110d883a 	add	r6,r2,r4
 4000174:	10800104 	addi	r2,r2,4
 4000178:	31c00015 	stw	r7,0(r6)
 400017c:	003ff906 	br	4000164 <__alt_data_end+0xfc000164>

04000180 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000180:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000184:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000188:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400018c:	40001e40 	call	40001e4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000190:	40002040 	call	4000204 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4000194:	d1a00417 	ldw	r6,-32752(gp)
 4000198:	d1600517 	ldw	r5,-32748(gp)
 400019c:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 40001a0:	dfc00017 	ldw	ra,0(sp)
 40001a4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 40001a8:	400005c1 	jmpi	400005c <main>

040001ac <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 40001ac:	defffe04 	addi	sp,sp,-8
 40001b0:	dc000015 	stw	r16,0(sp)
 40001b4:	dfc00115 	stw	ra,4(sp)
 40001b8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 40001bc:	400024c0 	call	400024c <strlen>
 40001c0:	01010034 	movhi	r4,1024
 40001c4:	000f883a 	mov	r7,zero
 40001c8:	100d883a 	mov	r6,r2
 40001cc:	800b883a 	mov	r5,r16
 40001d0:	2100a404 	addi	r4,r4,656
#else
    return fputs(str, stdout);
#endif
#endif
}
 40001d4:	dfc00117 	ldw	ra,4(sp)
 40001d8:	dc000017 	ldw	r16,0(sp)
 40001dc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 40001e0:	40002081 	jmpi	4000208 <altera_avalon_jtag_uart_write>

040001e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40001e4:	deffff04 	addi	sp,sp,-4
 40001e8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
 40001ec:	40002440 	call	4000244 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40001f0:	00800044 	movi	r2,1
 40001f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40001f8:	dfc00017 	ldw	ra,0(sp)
 40001fc:	dec00104 	addi	sp,sp,4
 4000200:	f800283a 	ret

04000204 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000204:	f800283a 	ret

04000208 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4000208:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400020c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4000210:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000214:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4000218:	2980072e 	bgeu	r5,r6,4000238 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 400021c:	38c00037 	ldwio	r3,0(r7)
 4000220:	18ffffec 	andhi	r3,r3,65535
 4000224:	183ffc26 	beq	r3,zero,4000218 <__alt_data_end+0xfc000218>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4000228:	28c00007 	ldb	r3,0(r5)
 400022c:	20c00035 	stwio	r3,0(r4)
 4000230:	29400044 	addi	r5,r5,1
 4000234:	003ff806 	br	4000218 <__alt_data_end+0xfc000218>

  return count;
}
 4000238:	f800283a 	ret

0400023c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400023c:	f800283a 	ret

04000240 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4000240:	f800283a 	ret

04000244 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4000244:	000170fa 	wrctl	ienable,zero
 4000248:	f800283a 	ret

0400024c <strlen>:
 400024c:	2005883a 	mov	r2,r4
 4000250:	10c00007 	ldb	r3,0(r2)
 4000254:	18000226 	beq	r3,zero,4000260 <strlen+0x14>
 4000258:	10800044 	addi	r2,r2,1
 400025c:	003ffc06 	br	4000250 <__alt_data_end+0xfc000250>
 4000260:	1105c83a 	sub	r2,r2,r4
 4000264:	f800283a 	ret
