
nios2.elf:     file format elf32-littlenios2
nios2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002760 memsz 0x00002760 flags r-x
    LOAD off    0x00004000 vaddr 0x04000000 paddr 0x00002780 align 2**12
         filesz 0x000001c8 memsz 0x000001e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000041c8  2**0
                  CONTENTS
  2 .text         00002760  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000cc  04000000  00002780  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000fc  040000cc  0000284c  000040cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  040001c8  00002948  000041c8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00002948  00002948  000041c8  2**0
                  CONTENTS
  7 .sdram_controller 00000000  040001e0  040001e0  000041c8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000041c8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000478  00000000  00000000  000041f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00006e0f  00000000  00000000  00004668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025bd  00000000  00000000  0000b477  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002c34  00000000  00000000  0000da34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000734  00000000  00000000  00010668  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000148f  00000000  00000000  00010d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000022b9  00000000  00000000  0001222b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000144e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000398  00000000  00000000  00014528  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00015eb6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00015eb9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00015ebe  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00015ebf  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00015ec0  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00015ec4  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00015ec8  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00015ecc  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00015ed5  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00015ede  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00015ee7  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000039  00000000  00000000  00015eef  2**0
                  CONTENTS, READONLY
 30 .jdi          00004652  00000000  00000000  00015f28  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     002991f6  00000000  00000000  0001a57a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
04000000 l    d  .rodata	00000000 .rodata
040000cc l    d  .rwdata	00000000 .rwdata
040001c8 l    d  .bss	00000000 .bss
00002948 l    d  .onchip_memory	00000000 .onchip_memory
040001e0 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/prodrigu/git/arqui2/MedianFilter-DE1-SoC/nios2_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 image.c
00000000 l    df *ABS*	00000000 imagenios.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 convert.c
00000000 l    df *ABS*	00000000 filter.c
00000000 l    df *ABS*	00000000 nios_comm.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001c24 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
040000cc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040001bc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0000257c g     F .text	0000002c alt_main
00001b24 g     F .text	00000080 _puts_r
0000284c g       *ABS*	00000000 __flash_rwdata_start
040001e0 g       *ABS*	00000000 __alt_heap_start
040001b0 g     O .rwdata	00000004 sdram
00001ad8 g     F .text	0000004c printf
000025a8 g     F .text	00000038 alt_putstr
040001c0 g     O .rwdata	00000004 jtag_uart
00002778 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
040001d0 g     O .bss	00000004 errno
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller
040001d8 g     O .bss	00000004 alt_argv
040081ac g       *ABS*	00000000 _gp
0000262c g     F .text	00000004 usleep
00001838 g     F .text	00000028 memcpy
00001ba4 g     F .text	00000014 puts
0000046c g     F .text	00000014 swap
00001810 g     F .text	00000014 malloc
00001a9c g     F .text	0000003c _printf_r
000023e0 g     F .text	00000064 .hidden __udivsi3
00001bb8 g     F .text	00000050 _sbrk_r
0000005c g     F .text	00000040 set_pixel
00000480 g     F .text	000000ac Bubblesort_Number
040001b4 g     O .rwdata	00000004 _global_impure_ptr
040001e0 g       *ABS*	00000000 __bss_end
00002770 g     F .text	00000004 alt_dcache_flush_all
040001c8 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00002630 g     F .text	00000060 write
040000cc g       *ABS*	00000000 __ram_rodata_end
00002444 g     F .text	00000058 .hidden __umodsi3
040001e0 g       *ABS*	00000000 end
040001ac g     O .rwdata	00000004 leds
08000000 g       *ABS*	00000000 __alt_stack_pointer
000026b4 g     F .text	00000034 altera_avalon_jtag_uart_write
00001c90 g     F .text	0000052c ___vfprintf_internal_r
00001860 g     F .text	000000e4 _free_r
00000020 g     F .text	0000003c _start
000026b0 g     F .text	00000004 alt_sys_init
000017e8 g     F .text	00000028 .hidden __mulsi3
040000cc g       *ABS*	00000000 __ram_rwdata_start
04000000 g       *ABS*	00000000 __ram_rodata_start
000026e8 g     F .text	00000088 alt_busy_sleep
040001e0 g       *ABS*	00000000 __alt_stack_base
000025e0 g     F .text	0000004c sbrk
0000052c g     F .text	00001190 medianFilter5x5
000021d8 g     F .text	000000b8 __sfvwrite_small_dev
040001c8 g       *ABS*	00000000 __bss_start
0000019c g     F .text	0000013c main
040001d4 g     O .bss	00000004 alt_envp
08000000 g       *ABS*	00000000 __alt_heap_limit
00001944 g     F .text	00000158 _malloc_r
040001c4 g     O .rwdata	00000004 alt_errno
000022e8 g     F .text	00000084 .hidden __divsi3
00002780 g       *ABS*	00000000 __flash_rodata_start
000002d8 g     F .text	000000b4 convertImageToImageNIOS
00002690 g     F .text	00000020 alt_irq_init
00002290 g     F .text	00000058 _write_r
040001b8 g     O .rwdata	00000004 _impure_ptr
040001dc g     O .bss	00000004 alt_argc
0000038c g     F .text	000000e0 convertNIOSImageToImage
0000172c g     F .text	000000bc receiveFromSDRAM
00000020 g       *ABS*	00000000 __ram_exceptions_start
040001c8 g       *ABS*	00000000 _edata
040001e0 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000236c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00001c08 g     F .text	0000001c strlen
0000009c g     F .text	000000f0 clone
0000018c g     F .text	00000010 freeImageNIOS
040001c8 g     O .bss	00000004 __malloc_sbrk_start
00002774 g     F .text	00000004 alt_icache_flush_all
040001cc g     O .bss	00000004 __malloc_free_list
000016bc g     F .text	00000070 sendToSDRAM
000021bc g     F .text	0000001c __vfprintf_internal
0000249c g     F .text	000000e0 alt_load
00001824 g     F .text	00000014 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
      28:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
      2c:	d6a06b14 	ori	gp,gp,33196
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
      34:	10807214 	ori	r2,r2,456

    movhi r3, %hi(__bss_end)
      38:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
      3c:	18c07814 	ori	r3,r3,480

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <__alt_data_end+0xf8000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	000249c0 	call	249c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	000257c0 	call	257c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <__alt_data_end+0xf8000058>

0000005c <set_pixel>:
#include "image.h"

void set_pixel(Image image, int x, int y, Pixel val){
      5c:	defffc04 	addi	sp,sp,-16
      60:	d8800617 	ldw	r2,24(sp)
      64:	d9000015 	stw	r4,0(sp)
      68:	d9400115 	stw	r5,4(sp)
    image.Rows[y][x] = val;
      6c:	1085883a 	add	r2,r2,r2
      70:	1085883a 	add	r2,r2,r2
      74:	2089883a 	add	r4,r4,r2
      78:	20c00017 	ldw	r3,0(r4)
      7c:	d8800517 	ldw	r2,20(sp)
#include "image.h"

void set_pixel(Image image, int x, int y, Pixel val){
      80:	d9800215 	stw	r6,8(sp)
      84:	d9c00315 	stw	r7,12(sp)
    image.Rows[y][x] = val;
      88:	1885883a 	add	r2,r3,r2
      8c:	d8c00717 	ldw	r3,28(sp)
      90:	10c00005 	stb	r3,0(r2)
}
      94:	dec00404 	addi	sp,sp,16
      98:	f800283a 	ret

0000009c <clone>:

Image clone(Image image){
      9c:	defff504 	addi	sp,sp,-44
      a0:	dc400115 	stw	r17,4(sp)
      a4:	dc400c17 	ldw	r17,48(sp)
      a8:	dc000015 	stw	r16,0(sp)
      ac:	2021883a 	mov	r16,r4
    //Reserve memory
    Pixelp * res_rows = (Pixelp*) malloc(sizeof(Pixelp) * image.size.height);
      b0:	8c49883a 	add	r4,r17,r17
      b4:	2109883a 	add	r4,r4,r4

void set_pixel(Image image, int x, int y, Pixel val){
    image.Rows[y][x] = val;
}

Image clone(Image image){
      b8:	dd800615 	stw	r22,24(sp)
      bc:	dd400515 	stw	r21,20(sp)
      c0:	dd000415 	stw	r20,16(sp)
      c4:	dcc00315 	stw	r19,12(sp)
      c8:	dc800215 	stw	r18,8(sp)
      cc:	dfc00715 	stw	ra,28(sp)
      d0:	d9400815 	stw	r5,32(sp)
      d4:	d9800915 	stw	r6,36(sp)
      d8:	d9c00a15 	stw	r7,40(sp)
      dc:	dcc00b17 	ldw	r19,44(sp)
    //Reserve memory
    Pixelp * res_rows = (Pixelp*) malloc(sizeof(Pixelp) * image.size.height);
      e0:	00018100 	call	1810 <malloc>
      e4:	1029883a 	mov	r20,r2
      e8:	102b883a 	mov	r21,r2
    for(int y = 0; y < image.size.height; y++) {
      ec:	102d883a 	mov	r22,r2
      f0:	0025883a 	mov	r18,zero
      f4:	9440060e 	bge	r18,r17,110 <clone+0x74>
      res_rows[y] = (Pixel *)malloc(sizeof(Pixel) * image.size.width);
      f8:	9809883a 	mov	r4,r19
      fc:	00018100 	call	1810 <malloc>
     100:	b0800015 	stw	r2,0(r22)
}

Image clone(Image image){
    //Reserve memory
    Pixelp * res_rows = (Pixelp*) malloc(sizeof(Pixelp) * image.size.height);
    for(int y = 0; y < image.size.height; y++) {
     104:	94800044 	addi	r18,r18,1
     108:	b5800104 	addi	r22,r22,4
     10c:	003ff906 	br	f4 <__alt_data_end+0xf80000f4>
     110:	0025883a 	mov	r18,zero
      res_rows[y] = (Pixel *)malloc(sizeof(Pixel) * image.size.width);
    }

    for(int y = 0; y < image.size.height; y++) {
     114:	94400b0e 	bge	r18,r17,144 <clone+0xa8>
        memcpy(res_rows[y],image.Rows[y], image.size.width);
     118:	d8c00817 	ldw	r3,32(sp)
     11c:	9485883a 	add	r2,r18,r18
     120:	1085883a 	add	r2,r2,r2
     124:	1885883a 	add	r2,r3,r2
     128:	a9000017 	ldw	r4,0(r21)
     12c:	11400017 	ldw	r5,0(r2)
     130:	980d883a 	mov	r6,r19
    Pixelp * res_rows = (Pixelp*) malloc(sizeof(Pixelp) * image.size.height);
    for(int y = 0; y < image.size.height; y++) {
      res_rows[y] = (Pixel *)malloc(sizeof(Pixel) * image.size.width);
    }

    for(int y = 0; y < image.size.height; y++) {
     134:	94800044 	addi	r18,r18,1
        memcpy(res_rows[y],image.Rows[y], image.size.width);
     138:	00018380 	call	1838 <memcpy>
     13c:	ad400104 	addi	r21,r21,4
     140:	003ff406 	br	114 <__alt_data_end+0xf8000114>
    }

    Image result = {res_rows, image.size};
     144:	01800404 	movi	r6,16
     148:	d9400904 	addi	r5,sp,36
     14c:	81000104 	addi	r4,r16,4
     150:	00018380 	call	1838 <memcpy>
    return result;
}
     154:	8005883a 	mov	r2,r16
    for(int y = 0; y < image.size.height; y++) {
        memcpy(res_rows[y],image.Rows[y], image.size.width);
    }

    Image result = {res_rows, image.size};
    return result;
     158:	85000015 	stw	r20,0(r16)
     15c:	84c00315 	stw	r19,12(r16)
     160:	84400415 	stw	r17,16(r16)
}
     164:	dfc00717 	ldw	ra,28(sp)
     168:	dd800617 	ldw	r22,24(sp)
     16c:	dd400517 	ldw	r21,20(sp)
     170:	dd000417 	ldw	r20,16(sp)
     174:	dcc00317 	ldw	r19,12(sp)
     178:	dc800217 	ldw	r18,8(sp)
     17c:	dc400117 	ldw	r17,4(sp)
     180:	dc000017 	ldw	r16,0(sp)
     184:	dec00b04 	addi	sp,sp,44
     188:	f800283a 	ret

0000018c <freeImageNIOS>:
#include "imagenios.h"

void freeImageNIOS(ImageNIOS img){
     18c:	defffd04 	addi	sp,sp,-12
    free (img.pixels);
     190:	3009883a 	mov	r4,r6
     194:	dec00304 	addi	sp,sp,12
#include "imagenios.h"

void freeImageNIOS(ImageNIOS img){
    free (img.pixels);
     198:	00018241 	jmpi	1824 <free>

0000019c <main>:
void * leds =  (void *) LEDS_BASE;


int main()
{ 
  alt_putstr("Median Filter!\n");
     19c:	01010034 	movhi	r4,1024
void * sdram = (void *) SDRAM_CONTROLLER_BASE + 0x2000;
void * leds =  (void *) LEDS_BASE;


int main()
{ 
     1a0:	deffec04 	addi	sp,sp,-80
  alt_putstr("Median Filter!\n");
     1a4:	21000004 	addi	r4,r4,0
void * sdram = (void *) SDRAM_CONTROLLER_BASE + 0x2000;
void * leds =  (void *) LEDS_BASE;


int main()
{ 
     1a8:	dfc01315 	stw	ra,76(sp)
     1ac:	dc001215 	stw	r16,72(sp)
  alt_putstr("Median Filter!\n");
     1b0:	00025a80 	call	25a8 <alt_putstr>

  printf("SDRAM Memory offset: %X\n", sdram);
     1b4:	d1600117 	ldw	r5,-32764(gp)
     1b8:	01010034 	movhi	r4,1024
     1bc:	21000404 	addi	r4,r4,16
     1c0:	0001ad80 	call	1ad8 <printf>
  printf("SDRAM SPAN: %X\n", SDRAM_CONTROLLER_BASE);
     1c4:	01010034 	movhi	r4,1024
     1c8:	01410034 	movhi	r5,1024
     1cc:	21000b04 	addi	r4,r4,44
     1d0:	0001ad80 	call	1ad8 <printf>
//  while(1){

	  printf("NIOS waiting for input image\n");
     1d4:	01010034 	movhi	r4,1024
     1d8:	21000f04 	addi	r4,r4,60
     1dc:	0001ba40 	call	1ba4 <puts>
	  while (*((int*)leds) != IMAGE_SENT_TO_NIOS){
     1e0:	04002ec4 	movi	r16,187
     1e4:	d0a00017 	ldw	r2,-32768(gp)
     1e8:	10800017 	ldw	r2,0(r2)
     1ec:	14000426 	beq	r2,r16,200 <main+0x64>
		  //printf("%X\n",*((int*)leds));
		  usleep(100000);
     1f0:	010000b4 	movhi	r4,2
     1f4:	2121a804 	addi	r4,r4,-31072
     1f8:	000262c0 	call	262c <usleep>
     1fc:	003ff906 	br	1e4 <__alt_data_end+0xf80001e4>
	  }
	  printf("NIOS receiving input image\n");
     200:	01010034 	movhi	r4,1024
     204:	21001704 	addi	r4,r4,92
     208:	0001ba40 	call	1ba4 <puts>
	  ImageNIOS fromARM = receiveFromSDRAM(sdram,leds,IMAGE_RECEIVED_ON_NIOS);
     20c:	d1a00017 	ldw	r6,-32768(gp)
     210:	d1600117 	ldw	r5,-32764(gp)
     214:	d9000f04 	addi	r4,sp,60
     218:	01c02a84 	movi	r7,170
     21c:	000172c0 	call	172c <receiveFromSDRAM>
	  Image fromARMconv = convertNIOSImageToImage(fromARM);
     220:	d9400f17 	ldw	r5,60(sp)
     224:	d9801017 	ldw	r6,64(sp)
     228:	d9c01117 	ldw	r7,68(sp)
     22c:	d9000704 	addi	r4,sp,28
     230:	000038c0 	call	38c <convertNIOSImageToImage>
	  printf("NIOS filtering input image\n");
     234:	01010034 	movhi	r4,1024
     238:	21001e04 	addi	r4,r4,120
     23c:	0001ba40 	call	1ba4 <puts>
	  Image filtered_img_arm = medianFilter5x5(fromARMconv);
     240:	d8800a17 	ldw	r2,40(sp)
     244:	d9400717 	ldw	r5,28(sp)
     248:	d9800817 	ldw	r6,32(sp)
     24c:	d8800015 	stw	r2,0(sp)
     250:	d8800b17 	ldw	r2,44(sp)
     254:	d9c00917 	ldw	r7,36(sp)
     258:	d9000204 	addi	r4,sp,8
     25c:	d8800115 	stw	r2,4(sp)
     260:	000052c0 	call	52c <medianFilter5x5>
	  printf("NIOS filtered input image\n");
     264:	01010034 	movhi	r4,1024
     268:	21002504 	addi	r4,r4,148
     26c:	0001ba40 	call	1ba4 <puts>
	  ImageNIOS toARM = convertImageToImageNIOS(filtered_img_arm);
     270:	d8800517 	ldw	r2,20(sp)
     274:	d9400217 	ldw	r5,8(sp)
     278:	d9800317 	ldw	r6,12(sp)
     27c:	d8800015 	stw	r2,0(sp)
     280:	d8800617 	ldw	r2,24(sp)
     284:	d9c00417 	ldw	r7,16(sp)
     288:	d9000c04 	addi	r4,sp,48
     28c:	d8800115 	stw	r2,4(sp)
     290:	00002d80 	call	2d8 <convertImageToImageNIOS>
	  sendToSDRAM (sdram, leds, IMAGE_SENT_TO_ARM, toARM);
     294:	d8800d17 	ldw	r2,52(sp)
     298:	d9c00c17 	ldw	r7,48(sp)
     29c:	d1600017 	ldw	r5,-32768(gp)
     2a0:	d8800015 	stw	r2,0(sp)
     2a4:	d8800e17 	ldw	r2,56(sp)
     2a8:	d1200117 	ldw	r4,-32764(gp)
     2ac:	01803fc4 	movi	r6,255
     2b0:	d8800115 	stw	r2,4(sp)
     2b4:	00016bc0 	call	16bc <sendToSDRAM>
	  printf("NIOS sent output image\n");
     2b8:	01010034 	movhi	r4,1024
     2bc:	21002c04 	addi	r4,r4,176
     2c0:	0001ba40 	call	1ba4 <puts>
//  }
  return 0;
}
     2c4:	0005883a 	mov	r2,zero
     2c8:	dfc01317 	ldw	ra,76(sp)
     2cc:	dc001217 	ldw	r16,72(sp)
     2d0:	dec01404 	addi	sp,sp,80
     2d4:	f800283a 	ret

000002d8 <convertImageToImageNIOS>:
#include "convert.h"

ImageNIOS convertImageToImageNIOS (Image img){
     2d8:	defff704 	addi	sp,sp,-36
     2dc:	dcc00315 	stw	r19,12(sp)
     2e0:	dc800215 	stw	r18,8(sp)
     2e4:	dcc00a17 	ldw	r19,40(sp)
    PixelNIOS * pixels = malloc(sizeof (PixelNIOS) * img.size.width * img.size.height);
     2e8:	dc800917 	ldw	r18,36(sp)
#include "convert.h"

ImageNIOS convertImageToImageNIOS (Image img){
     2ec:	dc400115 	stw	r17,4(sp)
     2f0:	d9400615 	stw	r5,24(sp)
     2f4:	2023883a 	mov	r17,r4
    PixelNIOS * pixels = malloc(sizeof (PixelNIOS) * img.size.width * img.size.height);
     2f8:	980b883a 	mov	r5,r19
     2fc:	9009883a 	mov	r4,r18
#include "convert.h"

ImageNIOS convertImageToImageNIOS (Image img){
     300:	dfc00515 	stw	ra,20(sp)
     304:	dd000415 	stw	r20,16(sp)
     308:	dc000015 	stw	r16,0(sp)
     30c:	d9800715 	stw	r6,28(sp)
     310:	d9c00815 	stw	r7,32(sp)
    PixelNIOS * pixels = malloc(sizeof (PixelNIOS) * img.size.width * img.size.height);
     314:	00017e80 	call	17e8 <__mulsi3>
     318:	1009883a 	mov	r4,r2
     31c:	00018100 	call	1810 <malloc>
     320:	1029883a 	mov	r20,r2
     324:	1007883a 	mov	r3,r2

    for(int y = 0; y < img.size.height; y++) {
     328:	0021883a 	mov	r16,zero
     32c:	84c00b0e 	bge	r16,r19,35c <convertImageToImageNIOS+0x84>
        memcpy((pixels+(y*img.size.width)),img.Rows[y], img.size.width);
     330:	d9000617 	ldw	r4,24(sp)
     334:	8405883a 	add	r2,r16,r16
     338:	1085883a 	add	r2,r2,r2
     33c:	2085883a 	add	r2,r4,r2
     340:	11400017 	ldw	r5,0(r2)
     344:	1809883a 	mov	r4,r3
     348:	900d883a 	mov	r6,r18
     34c:	00018380 	call	1838 <memcpy>
#include "convert.h"

ImageNIOS convertImageToImageNIOS (Image img){
    PixelNIOS * pixels = malloc(sizeof (PixelNIOS) * img.size.width * img.size.height);

    for(int y = 0; y < img.size.height; y++) {
     350:	84000044 	addi	r16,r16,1
     354:	1487883a 	add	r3,r2,r18
     358:	003ff406 	br	32c <__alt_data_end+0xf800032c>
        memcpy((pixels+(y*img.size.width)),img.Rows[y], img.size.width);
    }

    ImageNIOS result = {img.size.width, img.size.height, pixels};
    return result;
}
     35c:	8805883a 	mov	r2,r17
    for(int y = 0; y < img.size.height; y++) {
        memcpy((pixels+(y*img.size.width)),img.Rows[y], img.size.width);
    }

    ImageNIOS result = {img.size.width, img.size.height, pixels};
    return result;
     360:	8c800015 	stw	r18,0(r17)
     364:	8cc00115 	stw	r19,4(r17)
     368:	8d000215 	stw	r20,8(r17)
}
     36c:	dfc00517 	ldw	ra,20(sp)
     370:	dd000417 	ldw	r20,16(sp)
     374:	dcc00317 	ldw	r19,12(sp)
     378:	dc800217 	ldw	r18,8(sp)
     37c:	dc400117 	ldw	r17,4(sp)
     380:	dc000017 	ldw	r16,0(sp)
     384:	dec00904 	addi	sp,sp,36
     388:	f800283a 	ret

0000038c <convertNIOSImageToImage>:
Image convertNIOSImageToImage (ImageNIOS img){
     38c:	defff504 	addi	sp,sp,-44
     390:	dc000315 	stw	r16,12(sp)
     394:	2021883a 	mov	r16,r4
    Pixelp * rows = (Pixelp*) malloc(sizeof(Pixelp) * img.height);
     398:	3189883a 	add	r4,r6,r6
     39c:	2109883a 	add	r4,r4,r4
    }

    ImageNIOS result = {img.size.width, img.size.height, pixels};
    return result;
}
Image convertNIOSImageToImage (ImageNIOS img){
     3a0:	dd800915 	stw	r22,36(sp)
     3a4:	dd400815 	stw	r21,32(sp)
     3a8:	dd000715 	stw	r20,28(sp)
     3ac:	dcc00615 	stw	r19,24(sp)
     3b0:	dc800515 	stw	r18,20(sp)
     3b4:	dc400415 	stw	r17,16(sp)
     3b8:	dfc00a15 	stw	ra,40(sp)
     3bc:	d9c00215 	stw	r7,8(sp)
     3c0:	2825883a 	mov	r18,r5
     3c4:	3027883a 	mov	r19,r6
    Pixelp * rows = (Pixelp*) malloc(sizeof(Pixelp) * img.height);
     3c8:	00018100 	call	1810 <malloc>
     3cc:	1029883a 	mov	r20,r2
     3d0:	102b883a 	mov	r21,r2

    for(int y = 0; y < img.height; y++) {
     3d4:	102d883a 	mov	r22,r2
     3d8:	0023883a 	mov	r17,zero
     3dc:	8cc00626 	beq	r17,r19,3f8 <convertNIOSImageToImage+0x6c>
      rows[y] = (Pixel *)malloc(sizeof(Pixel) * img.width);
     3e0:	9009883a 	mov	r4,r18
     3e4:	00018100 	call	1810 <malloc>
     3e8:	b0800015 	stw	r2,0(r22)
    return result;
}
Image convertNIOSImageToImage (ImageNIOS img){
    Pixelp * rows = (Pixelp*) malloc(sizeof(Pixelp) * img.height);

    for(int y = 0; y < img.height; y++) {
     3ec:	8c400044 	addi	r17,r17,1
     3f0:	b5800104 	addi	r22,r22,4
     3f4:	003ff906 	br	3dc <__alt_data_end+0xf80003dc>
     3f8:	0005883a 	mov	r2,zero
     3fc:	0023883a 	mov	r17,zero
     400:	90ad883a 	add	r22,r18,r2
      rows[y] = (Pixel *)malloc(sizeof(Pixel) * img.width);
    }

    for(int y = 0; y < img.height; y++) {
     404:	8cc00926 	beq	r17,r19,42c <convertNIOSImageToImage+0xa0>
        memcpy(rows[y],(img.pixels + ( y * img.width )), img.width);
     408:	d9400217 	ldw	r5,8(sp)
     40c:	a9000017 	ldw	r4,0(r21)
     410:	900d883a 	mov	r6,r18
     414:	288b883a 	add	r5,r5,r2
     418:	00018380 	call	1838 <memcpy>

    for(int y = 0; y < img.height; y++) {
      rows[y] = (Pixel *)malloc(sizeof(Pixel) * img.width);
    }

    for(int y = 0; y < img.height; y++) {
     41c:	8c400044 	addi	r17,r17,1
     420:	ad400104 	addi	r21,r21,4
     424:	b005883a 	mov	r2,r22
     428:	003ff506 	br	400 <__alt_data_end+0xf8000400>


    ImgSize size = {0,0,img.width,img.height};
    Image result = { rows, size };
    return result;
     42c:	8005883a 	mov	r2,r16



    ImgSize size = {0,0,img.width,img.height};
    Image result = { rows, size };
    return result;
     430:	85000015 	stw	r20,0(r16)
     434:	80000115 	stw	zero,4(r16)
     438:	80000215 	stw	zero,8(r16)
     43c:	84800315 	stw	r18,12(r16)
     440:	84400415 	stw	r17,16(r16)
     444:	dfc00a17 	ldw	ra,40(sp)
     448:	dd800917 	ldw	r22,36(sp)
     44c:	dd400817 	ldw	r21,32(sp)
     450:	dd000717 	ldw	r20,28(sp)
     454:	dcc00617 	ldw	r19,24(sp)
     458:	dc800517 	ldw	r18,20(sp)
     45c:	dc400417 	ldw	r17,16(sp)
     460:	dc000317 	ldw	r16,12(sp)
     464:	dec00b04 	addi	sp,sp,44
     468:	f800283a 	ret

0000046c <swap>:
#include "filter.h"

void swap (int *xp, int *yp){ 
    int temp = *xp; 
    *xp = *yp; 
     46c:	28c00017 	ldw	r3,0(r5)
#include "filter.h"

void swap (int *xp, int *yp){ 
    int temp = *xp; 
     470:	20800017 	ldw	r2,0(r4)
    *xp = *yp; 
     474:	20c00015 	stw	r3,0(r4)
    *yp = temp; 
     478:	28800015 	stw	r2,0(r5)
     47c:	f800283a 	ret

00000480 <Bubblesort_Number>:
  }
int Bubblesort_Number (int array[], int size){
     480:	28bfffc4 	addi	r2,r5,-1
     484:	100f883a 	mov	r7,r2

    int i, j; 
    for (i = 0; i < size-1; i++){
     488:	11c7c83a 	sub	r3,r2,r7
     48c:	18800f0e 	bge	r3,r2,4cc <Bubblesort_Number+0x4c>
     490:	200d883a 	mov	r6,r4
     494:	20c00104 	addi	r3,r4,4
     498:	0011883a 	mov	r8,zero
      // Last i elements are already in place    
      for (j = 0; j < size-i-1; j++){
     49c:	41c0090e 	bge	r8,r7,4c4 <Bubblesort_Number+0x44>
        if (array[j] > array[j+1]){
     4a0:	32400017 	ldw	r9,0(r6)
     4a4:	1a800017 	ldw	r10,0(r3)
     4a8:	5240020e 	bge	r10,r9,4b4 <Bubblesort_Number+0x34>
#include "filter.h"

void swap (int *xp, int *yp){ 
    int temp = *xp; 
    *xp = *yp; 
     4ac:	32800015 	stw	r10,0(r6)
    *yp = temp; 
     4b0:	1a400015 	stw	r9,0(r3)
int Bubblesort_Number (int array[], int size){

    int i, j; 
    for (i = 0; i < size-1; i++){
      // Last i elements are already in place    
      for (j = 0; j < size-i-1; j++){
     4b4:	42000044 	addi	r8,r8,1
     4b8:	31800104 	addi	r6,r6,4
     4bc:	18c00104 	addi	r3,r3,4
     4c0:	003ff606 	br	49c <__alt_data_end+0xf800049c>
     4c4:	39ffffc4 	addi	r7,r7,-1
     4c8:	003fef06 	br	488 <__alt_data_end+0xf8000488>
          swap(&array[j], &array[j+1]);
        } 
      } 
    }

    if(size % 2 == 0){
     4cc:	28c0004c 	andi	r3,r5,1
     4d0:	18000e1e 	bne	r3,zero,50c <Bubblesort_Number+0x8c>
    //printf("RESULT NUMBER/S = %d , %d \n",array[(size-2)/2],array[((size-2)/2)+1]);
      return (array[(size-2)/2] + array[((size-2)/2)+1]) / 2;
     4d4:	297fff84 	addi	r5,r5,-2
     4d8:	2804d7fa 	srli	r2,r5,31
     4dc:	114b883a 	add	r5,r2,r5
     4e0:	280bd07a 	srai	r5,r5,1
     4e4:	294b883a 	add	r5,r5,r5
     4e8:	294b883a 	add	r5,r5,r5
     4ec:	2149883a 	add	r4,r4,r5
     4f0:	20c00117 	ldw	r3,4(r4)
     4f4:	20800017 	ldw	r2,0(r4)
     4f8:	1885883a 	add	r2,r3,r2
     4fc:	1006d7fa 	srli	r3,r2,31
     500:	1885883a 	add	r2,r3,r2
     504:	1005d07a 	srai	r2,r2,1
     508:	f800283a 	ret
    }else{
      //printf("RESULT NUMBERS = %d \n",array[(size-1)/2]);
      return array[(size-1)/2];
     50c:	1006d7fa 	srli	r3,r2,31
     510:	1885883a 	add	r2,r3,r2
     514:	1005d07a 	srai	r2,r2,1
     518:	1085883a 	add	r2,r2,r2
     51c:	1085883a 	add	r2,r2,r2
     520:	2089883a 	add	r4,r4,r2
     524:	20800017 	ldw	r2,0(r4)
    }
}
     528:	f800283a 	ret

0000052c <medianFilter5x5>:

Image medianFilter5x5 (Image image){
     52c:	deffcd04 	addi	sp,sp,-204
     530:	d8c03317 	ldw	r3,204(sp)
     534:	df002e15 	stw	fp,184(sp)
     538:	dd002a15 	stw	r20,168(sp)
     53c:	d8c02115 	stw	r3,132(sp)
     540:	d8c03417 	ldw	r3,208(sp)
     544:	dcc02915 	stw	r19,164(sp)
     548:	dc802815 	stw	r18,160(sp)
     54c:	d8c02215 	stw	r3,136(sp)
    Image cloned_image = clone(image);
     550:	d8c02117 	ldw	r3,132(sp)
      //printf("RESULT NUMBERS = %d \n",array[(size-1)/2]);
      return array[(size-1)/2];
    }
}

Image medianFilter5x5 (Image image){
     554:	dc402715 	stw	r17,156(sp)
     558:	dfc02f15 	stw	ra,188(sp)
    Image cloned_image = clone(image);
     55c:	d8c00015 	stw	r3,0(sp)
     560:	d8c02217 	ldw	r3,136(sp)
      //printf("RESULT NUMBERS = %d \n",array[(size-1)/2]);
      return array[(size-1)/2];
    }
}

Image medianFilter5x5 (Image image){
     564:	ddc02d15 	stw	r23,180(sp)
     568:	dd802c15 	stw	r22,176(sp)
    Image cloned_image = clone(image);
     56c:	d8c00115 	stw	r3,4(sp)
      //printf("RESULT NUMBERS = %d \n",array[(size-1)/2]);
      return array[(size-1)/2];
    }
}

Image medianFilter5x5 (Image image){
     570:	dd402b15 	stw	r21,172(sp)
     574:	dc002615 	stw	r16,152(sp)
     578:	2039883a 	mov	fp,r4
     57c:	d9403015 	stw	r5,192(sp)
     580:	d9803115 	stw	r6,196(sp)
     584:	d9c03215 	stw	r7,200(sp)
     588:	d9401d15 	stw	r5,116(sp)
    Image cloned_image = clone(image);
     58c:	000009c0 	call	9c <clone>
     590:	dcc01d17 	ldw	r19,116(sp)
     
    for(int j = 0; j < image.size.height ; j++){
     594:	0023883a 	mov	r17,zero
     598:	98c00104 	addi	r3,r19,4
     59c:	d8c01e15 	stw	r3,120(sp)
     5a0:	98c00204 	addi	r3,r19,8
     5a4:	d8c01f15 	stw	r3,124(sp)
              
              set_pixel(cloned_image, i, j, res);

            }

        }else if(j == image.size.height -1){
     5a8:	d8c02217 	ldw	r3,136(sp)
     5ac:	9cbfff04 	addi	r18,r19,-4
     5b0:	9d3ffe04 	addi	r20,r19,-8
     5b4:	18ffffc4 	addi	r3,r3,-1
     5b8:	d8c02415 	stw	r3,144(sp)
                set_pixel(cloned_image, i, j, res);
                
            }


        }else if(j == image.size.height -2){
     5bc:	d8c02217 	ldw	r3,136(sp)
     5c0:	18ffff84 	addi	r3,r3,-2
     5c4:	d8c02515 	stw	r3,148(sp)
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
     5c8:	d8c02117 	ldw	r3,132(sp)
     5cc:	18ffffc4 	addi	r3,r3,-1
     5d0:	d8c02015 	stw	r3,128(sp)
              int res =  Bubblesort_Number(array , size);
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
     5d4:	d8c02117 	ldw	r3,132(sp)
     5d8:	18ffff84 	addi	r3,r3,-2
     5dc:	d8c02315 	stw	r3,140(sp)
}

Image medianFilter5x5 (Image image){
    Image cloned_image = clone(image);
     
    for(int j = 0; j < image.size.height ; j++){
     5e0:	d8c02217 	ldw	r3,136(sp)
     5e4:	88c4280e 	bge	r17,r3,1688 <medianFilter5x5+0x115c>
     5e8:	05bfff84 	movi	r22,-2
     5ec:	057fffc4 	movi	r21,-1
     5f0:	04000044 	movi	r16,1
     5f4:	002f883a 	mov	r23,zero
      for(int i = 0; i < image.size.width ; i++){
     5f8:	d8c02117 	ldw	r3,132(sp)
     5fc:	b8c4170e 	bge	r23,r3,165c <medianFilter5x5+0x1130>
        if(j == 0 ){
     600:	8800b31e 	bne	r17,zero,8d0 <medianFilter5x5+0x3a4>
     604:	d8c01d17 	ldw	r3,116(sp)
     608:	19400017 	ldw	r5,0(r3)
     60c:	19000117 	ldw	r4,4(r3)
     610:	18800217 	ldw	r2,8(r3)
            if(i == 0){
     614:	b800191e 	bne	r23,zero,67c <medianFilter5x5+0x150>
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2]  ,image.Rows[j+1][i], image.Rows[j+2][i], image.Rows[j+1][i+1], image.Rows[j+2][i+2], 
     618:	29800003 	ldbu	r6,0(r5)
     61c:	d9800415 	stw	r6,16(sp)
     620:	29800043 	ldbu	r6,1(r5)
     624:	d9800515 	stw	r6,20(sp)
     628:	29400083 	ldbu	r5,2(r5)
     62c:	d9400615 	stw	r5,24(sp)
     630:	21400003 	ldbu	r5,0(r4)
     634:	d9400715 	stw	r5,28(sp)
     638:	11400003 	ldbu	r5,0(r2)
     63c:	d9400815 	stw	r5,32(sp)
     640:	21400043 	ldbu	r5,1(r4)
     644:	d9400915 	stw	r5,36(sp)
     648:	11400083 	ldbu	r5,2(r2)
     64c:	d9400a15 	stw	r5,40(sp)
     650:	10800043 	ldbu	r2,1(r2)
                image.Rows[j+2][i+1], image.Rows[j+1][i+2] };
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);
     654:	01400244 	movi	r5,9
     
    for(int j = 0; j < image.size.height ; j++){
      for(int i = 0; i < image.size.width ; i++){
        if(j == 0 ){
            if(i == 0){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2]  ,image.Rows[j+1][i], image.Rows[j+2][i], image.Rows[j+1][i+1], image.Rows[j+2][i+2], 
     658:	d8800b15 	stw	r2,44(sp)
     65c:	20800083 	ldbu	r2,2(r4)
                image.Rows[j+2][i+1], image.Rows[j+1][i+2] };
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);
     660:	d9000404 	addi	r4,sp,16
     
    for(int j = 0; j < image.size.height ; j++){
      for(int i = 0; i < image.size.width ; i++){
        if(j == 0 ){
            if(i == 0){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2]  ,image.Rows[j+1][i], image.Rows[j+2][i], image.Rows[j+1][i+1], image.Rows[j+2][i+2], 
     664:	d8800c15 	stw	r2,48(sp)
                image.Rows[j+2][i+1], image.Rows[j+1][i+2] };
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);
     668:	00004800 	call	480 <Bubblesort_Number>

                set_pixel(cloned_image, i, j, res);
     66c:	10803fcc 	andi	r2,r2,255
     670:	d8800315 	stw	r2,12(sp)
     674:	d8000215 	stw	zero,8(sp)
     678:	0000bb06 	br	968 <medianFilter5x5+0x43c>
            
            }else if(i == 1){
     67c:	01800044 	movi	r6,1
     680:	b980171e 	bne	r23,r6,6e0 <medianFilter5x5+0x1b4>
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j+1][i] , image.Rows[j+1][i+1] , image.Rows[j+1][i+2], 
     684:	29800043 	ldbu	r6,1(r5)
     688:	d9800415 	stw	r6,16(sp)
     68c:	29800083 	ldbu	r6,2(r5)
     690:	d9800515 	stw	r6,20(sp)
     694:	298000c3 	ldbu	r6,3(r5)
     698:	d9800615 	stw	r6,24(sp)
     69c:	29400003 	ldbu	r5,0(r5)
     6a0:	d9400715 	stw	r5,28(sp)
     6a4:	21400043 	ldbu	r5,1(r4)
     6a8:	d9400815 	stw	r5,32(sp)
     6ac:	21400083 	ldbu	r5,2(r4)
     6b0:	d9400915 	stw	r5,36(sp)
     6b4:	214000c3 	ldbu	r5,3(r4)
     6b8:	d9400a15 	stw	r5,40(sp)
     6bc:	21000003 	ldbu	r4,0(r4)
     6c0:	d9000b15 	stw	r4,44(sp)
     6c4:	11000043 	ldbu	r4,1(r2)
     6c8:	d9000c15 	stw	r4,48(sp)
     6cc:	11000083 	ldbu	r4,2(r2)
     6d0:	d9000d15 	stw	r4,52(sp)
     6d4:	110000c3 	ldbu	r4,3(r2)
     6d8:	d9000e15 	stw	r4,56(sp)
     6dc:	00004306 	br	7ec <medianFilter5x5+0x2c0>
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if( i == image.size.width -1){
     6e0:	d8c02017 	ldw	r3,128(sp)
     6e4:	b8c01d1e 	bne	r23,r3,75c <medianFilter5x5+0x230>
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2]  ,image.Rows[j+1][i], image.Rows[j+2][i], image.Rows[j+1][i-1], image.Rows[j+2][i-2], 
     6e8:	2dcd883a 	add	r6,r5,r23
     6ec:	31800003 	ldbu	r6,0(r6)
     6f0:	d9800415 	stw	r6,16(sp)
     6f4:	2d4d883a 	add	r6,r5,r21
     6f8:	31800003 	ldbu	r6,0(r6)
     6fc:	2d8b883a 	add	r5,r5,r22
     700:	d9800515 	stw	r6,20(sp)
     704:	29400003 	ldbu	r5,0(r5)
     708:	d9400615 	stw	r5,24(sp)
     70c:	25cb883a 	add	r5,r4,r23
     710:	29400003 	ldbu	r5,0(r5)
     714:	d9400715 	stw	r5,28(sp)
     718:	15cb883a 	add	r5,r2,r23
     71c:	29400003 	ldbu	r5,0(r5)
     720:	d9400815 	stw	r5,32(sp)
     724:	254b883a 	add	r5,r4,r21
     728:	29400003 	ldbu	r5,0(r5)
                image.Rows[j+2][i-1], image.Rows[j+1][i-2] };
     72c:	2589883a 	add	r4,r4,r22
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if( i == image.size.width -1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2]  ,image.Rows[j+1][i], image.Rows[j+2][i], image.Rows[j+1][i-1], image.Rows[j+2][i-2], 
     730:	d9400915 	stw	r5,36(sp)
     734:	158b883a 	add	r5,r2,r22
     738:	29400003 	ldbu	r5,0(r5)
                image.Rows[j+2][i-1], image.Rows[j+1][i-2] };
     73c:	1545883a 	add	r2,r2,r21
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if( i == image.size.width -1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2]  ,image.Rows[j+1][i], image.Rows[j+2][i], image.Rows[j+1][i-1], image.Rows[j+2][i-2], 
     740:	d9400a15 	stw	r5,40(sp)
     744:	10800003 	ldbu	r2,0(r2)
                image.Rows[j+2][i-1], image.Rows[j+1][i-2] };
                int size = sizeof(array)/sizeof(array[0]);
                int res =  Bubblesort_Number(array , size);
     748:	01400244 	movi	r5,9
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if( i == image.size.width -1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2]  ,image.Rows[j+1][i], image.Rows[j+2][i], image.Rows[j+1][i-1], image.Rows[j+2][i-2], 
     74c:	d8800b15 	stw	r2,44(sp)
     750:	20800003 	ldbu	r2,0(r4)
     754:	d8800c15 	stw	r2,48(sp)
     758:	00002706 	br	7f8 <medianFilter5x5+0x2cc>
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     75c:	2dcd883a 	add	r6,r5,r23
     760:	31800003 	ldbu	r6,0(r6)
                int size = sizeof(array)/sizeof(array[0]);
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
     764:	d8c02317 	ldw	r3,140(sp)
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     768:	d9800415 	stw	r6,16(sp)
                int size = sizeof(array)/sizeof(array[0]);
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
     76c:	b8c0241e 	bne	r23,r3,800 <medianFilter5x5+0x2d4>
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     770:	2d4d883a 	add	r6,r5,r21
     774:	31800003 	ldbu	r6,0(r6)
     778:	d9800515 	stw	r6,20(sp)
     77c:	2d8d883a 	add	r6,r5,r22
     780:	31800003 	ldbu	r6,0(r6)
     784:	2c0b883a 	add	r5,r5,r16
     788:	d9800615 	stw	r6,24(sp)
     78c:	29400003 	ldbu	r5,0(r5)
     790:	d9400715 	stw	r5,28(sp)
     794:	25cb883a 	add	r5,r4,r23
     798:	29400003 	ldbu	r5,0(r5)
     79c:	d9400815 	stw	r5,32(sp)
     7a0:	254b883a 	add	r5,r4,r21
     7a4:	29400003 	ldbu	r5,0(r5)
     7a8:	d9400915 	stw	r5,36(sp)
     7ac:	258b883a 	add	r5,r4,r22
     7b0:	29400003 	ldbu	r5,0(r5)
                image.Rows[j+1][i+1] , image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2], image.Rows[j+2][i+1]  };
     7b4:	2409883a 	add	r4,r4,r16
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     7b8:	d9400a15 	stw	r5,40(sp)
     7bc:	21000003 	ldbu	r4,0(r4)
     7c0:	d9000b15 	stw	r4,44(sp)
                image.Rows[j+1][i+1] , image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2], image.Rows[j+2][i+1]  };
     7c4:	15c9883a 	add	r4,r2,r23
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     7c8:	21000003 	ldbu	r4,0(r4)
     7cc:	d9000c15 	stw	r4,48(sp)
                image.Rows[j+1][i+1] , image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2], image.Rows[j+2][i+1]  };
     7d0:	1549883a 	add	r4,r2,r21
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     7d4:	21000003 	ldbu	r4,0(r4)
     7d8:	d9000d15 	stw	r4,52(sp)
                image.Rows[j+1][i+1] , image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2], image.Rows[j+2][i+1]  };
     7dc:	1589883a 	add	r4,r2,r22
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     7e0:	21000003 	ldbu	r4,0(r4)
                image.Rows[j+1][i+1] , image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2], image.Rows[j+2][i+1]  };
     7e4:	1405883a 	add	r2,r2,r16
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     7e8:	d9000e15 	stw	r4,56(sp)
     7ec:	10800003 	ldbu	r2,0(r2)
                image.Rows[j+1][i+1] , image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2], image.Rows[j+2][i+1]  };
                int size = sizeof(array)/sizeof(array[0]);;
                int res =  Bubblesort_Number(array , size);
     7f0:	01400304 	movi	r5,12
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i] , image.Rows[j+1][i-1] , image.Rows[j+1][i-2], 
     7f4:	d8800f15 	stw	r2,60(sp)
                image.Rows[j+1][i+1] , image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2], image.Rows[j+2][i+1]  };
                int size = sizeof(array)/sizeof(array[0]);;
                int res =  Bubblesort_Number(array , size);
     7f8:	d9000404 	addi	r4,sp,16
     7fc:	00002f06 	br	8bc <medianFilter5x5+0x390>


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     800:	2c0d883a 	add	r6,r5,r16
     804:	31800003 	ldbu	r6,0(r6)
     808:	d9800515 	stw	r6,20(sp)
     80c:	b9800084 	addi	r6,r23,2
     810:	298f883a 	add	r7,r5,r6
     814:	39c00003 	ldbu	r7,0(r7)
     818:	d9c00615 	stw	r7,24(sp)
     81c:	2d4f883a 	add	r7,r5,r21
     820:	39c00003 	ldbu	r7,0(r7)
     824:	2d8b883a 	add	r5,r5,r22
     828:	d9c00715 	stw	r7,28(sp)
     82c:	29400003 	ldbu	r5,0(r5)
     830:	d9400815 	stw	r5,32(sp)
     834:	25cb883a 	add	r5,r4,r23
     838:	29400003 	ldbu	r5,0(r5)
     83c:	d9400915 	stw	r5,36(sp)
     840:	240b883a 	add	r5,r4,r16
     844:	29400003 	ldbu	r5,0(r5)
     848:	d9400a15 	stw	r5,40(sp)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
     84c:	218b883a 	add	r5,r4,r6
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     850:	29400003 	ldbu	r5,0(r5)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
     854:	118d883a 	add	r6,r2,r6
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     858:	d9400b15 	stw	r5,44(sp)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
     85c:	254b883a 	add	r5,r4,r21
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     860:	29c00003 	ldbu	r7,0(r5)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
     864:	2589883a 	add	r4,r4,r22
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     868:	d9c00c15 	stw	r7,48(sp)
     86c:	29400003 	ldbu	r5,0(r5)
     870:	d9400d15 	stw	r5,52(sp)
     874:	21000003 	ldbu	r4,0(r4)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
                image.Rows[j+2][i-2] };
                int size = sizeof(array)/sizeof(array[0]);
                int res =  Bubblesort_Number(array , size);
     878:	01400404 	movi	r5,16
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     87c:	d9000e15 	stw	r4,56(sp)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
     880:	15c9883a 	add	r4,r2,r23
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     884:	21000003 	ldbu	r4,0(r4)
     888:	d9000f15 	stw	r4,60(sp)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
     88c:	1409883a 	add	r4,r2,r16
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     890:	21000003 	ldbu	r4,0(r4)
     894:	d9001015 	stw	r4,64(sp)
     898:	31000003 	ldbu	r4,0(r6)
     89c:	d9001115 	stw	r4,68(sp)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
     8a0:	1549883a 	add	r4,r2,r21
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     8a4:	21000003 	ldbu	r4,0(r4)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
                image.Rows[j+2][i-2] };
     8a8:	1585883a 	add	r2,r2,r22
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     8ac:	d9001215 	stw	r4,72(sp)
     8b0:	10800003 	ldbu	r2,0(r2)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
                image.Rows[j+2][i-2] };
                int size = sizeof(array)/sizeof(array[0]);
                int res =  Bubblesort_Number(array , size);
     8b4:	d949883a 	add	r4,sp,r5
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j+1][i] , image.Rows[j+1][i+1],
     8b8:	d8801315 	stw	r2,76(sp)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1],
                image.Rows[j+2][i-2] };
                int size = sizeof(array)/sizeof(array[0]);
                int res =  Bubblesort_Number(array , size);
     8bc:	00004800 	call	480 <Bubblesort_Number>

                set_pixel(cloned_image, i, j, res);
     8c0:	10803fcc 	andi	r2,r2,255
     8c4:	d8800315 	stw	r2,12(sp)
     8c8:	d8000215 	stw	zero,8(sp)
     8cc:	00035606 	br	1628 <medianFilter5x5+0x10fc>
                
            }
            
        }else if(j == 1){
     8d0:	00800044 	movi	r2,1
     8d4:	8880da1e 	bne	r17,r2,c40 <medianFilter5x5+0x714>
     8d8:	d8c01d17 	ldw	r3,116(sp)
     8dc:	19000017 	ldw	r4,0(r3)
     8e0:	19400117 	ldw	r5,4(r3)
     8e4:	18800217 	ldw	r2,8(r3)
     8e8:	19800317 	ldw	r6,12(r3)
            if(i == 0){
     8ec:	b800201e 	bne	r23,zero,970 <medianFilter5x5+0x444>
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j+1][i],
     8f0:	29c00003 	ldbu	r7,0(r5)
     8f4:	d9c00415 	stw	r7,16(sp)
     8f8:	29c00043 	ldbu	r7,1(r5)
     8fc:	d9c00515 	stw	r7,20(sp)
     900:	29400083 	ldbu	r5,2(r5)
     904:	d9400615 	stw	r5,24(sp)
     908:	21400003 	ldbu	r5,0(r4)
     90c:	d9400715 	stw	r5,28(sp)
     910:	21400043 	ldbu	r5,1(r4)
     914:	d9400815 	stw	r5,32(sp)
     918:	21000083 	ldbu	r4,2(r4)
     91c:	d9000915 	stw	r4,36(sp)
     920:	11000003 	ldbu	r4,0(r2)
     924:	d9000a15 	stw	r4,40(sp)
     928:	11000043 	ldbu	r4,1(r2)
     92c:	d9000b15 	stw	r4,44(sp)
     930:	10800083 	ldbu	r2,2(r2)
     934:	d8800c15 	stw	r2,48(sp)
     938:	30800003 	ldbu	r2,0(r6)
     93c:	d8800d15 	stw	r2,52(sp)
     940:	30800043 	ldbu	r2,1(r6)
     944:	d8800e15 	stw	r2,56(sp)
     948:	30800083 	ldbu	r2,2(r6)
     94c:	d8800f15 	stw	r2,60(sp)
              image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2]};
              int size = sizeof(array)/sizeof(array[0]);

              int res =  Bubblesort_Number(array , size);
     950:	01400304 	movi	r5,12
     954:	d9000404 	addi	r4,sp,16
     958:	00004800 	call	480 <Bubblesort_Number>
              
              
              set_pixel(cloned_image, i, j, res);
     95c:	10803fcc 	andi	r2,r2,255
     960:	d8800315 	stw	r2,12(sp)
     964:	dc400215 	stw	r17,8(sp)
     968:	d8000115 	stw	zero,4(sp)
     96c:	00032f06 	br	162c <medianFilter5x5+0x1100>

            }else if(i == 1){
     970:	bc40271e 	bne	r23,r17,a10 <medianFilter5x5+0x4e4>
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2],
     974:	29c00043 	ldbu	r7,1(r5)
     978:	d9c00415 	stw	r7,16(sp)
     97c:	29c00083 	ldbu	r7,2(r5)
     980:	d9c00515 	stw	r7,20(sp)
     984:	29c000c3 	ldbu	r7,3(r5)
     988:	d9c00615 	stw	r7,24(sp)
     98c:	29400003 	ldbu	r5,0(r5)
     990:	d9400715 	stw	r5,28(sp)
     994:	21400043 	ldbu	r5,1(r4)
     998:	d9400815 	stw	r5,32(sp)
     99c:	21400083 	ldbu	r5,2(r4)
     9a0:	d9400915 	stw	r5,36(sp)
     9a4:	214000c3 	ldbu	r5,3(r4)
     9a8:	d9400a15 	stw	r5,40(sp)
     9ac:	21000003 	ldbu	r4,0(r4)
              image.Rows[j-1][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2],
              image.Rows[j+2][i-1]};
              int size = sizeof(array)/sizeof(array[0]);
              int res =  Bubblesort_Number(array , size);
     9b0:	01400404 	movi	r5,16
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == 1){
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2],
     9b4:	d9000b15 	stw	r4,44(sp)
     9b8:	11000043 	ldbu	r4,1(r2)
     9bc:	d9000c15 	stw	r4,48(sp)
     9c0:	11000083 	ldbu	r4,2(r2)
     9c4:	d9000d15 	stw	r4,52(sp)
     9c8:	110000c3 	ldbu	r4,3(r2)
     9cc:	d9000e15 	stw	r4,56(sp)
     9d0:	10800003 	ldbu	r2,0(r2)
              image.Rows[j-1][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2],
              image.Rows[j+2][i-1]};
              int size = sizeof(array)/sizeof(array[0]);
              int res =  Bubblesort_Number(array , size);
     9d4:	d949883a 	add	r4,sp,r5
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == 1){
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2],
     9d8:	d8800f15 	stw	r2,60(sp)
     9dc:	30800043 	ldbu	r2,1(r6)
     9e0:	d8801015 	stw	r2,64(sp)
     9e4:	30800083 	ldbu	r2,2(r6)
     9e8:	d8801115 	stw	r2,68(sp)
     9ec:	308000c3 	ldbu	r2,3(r6)
     9f0:	d8801215 	stw	r2,72(sp)
     9f4:	30800003 	ldbu	r2,0(r6)
     9f8:	d8801315 	stw	r2,76(sp)
              image.Rows[j-1][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2],
              image.Rows[j+2][i-1]};
              int size = sizeof(array)/sizeof(array[0]);
              int res =  Bubblesort_Number(array , size);
     9fc:	00004800 	call	480 <Bubblesort_Number>
              
              
              set_pixel(cloned_image, i, j, res);
     a00:	10803fcc 	andi	r2,r2,255
     a04:	d8800315 	stw	r2,12(sp)
     a08:	ddc00215 	stw	r23,8(sp)
     a0c:	00030606 	br	1628 <medianFilter5x5+0x10fc>


            }else if(i == image.size.width -1){
     a10:	d8c02017 	ldw	r3,128(sp)
     a14:	b8c0241e 	bne	r23,r3,aa8 <medianFilter5x5+0x57c>
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i],
     a18:	2dcf883a 	add	r7,r5,r23
     a1c:	39c00003 	ldbu	r7,0(r7)
     a20:	d9c00415 	stw	r7,16(sp)
     a24:	2d4f883a 	add	r7,r5,r21
     a28:	39c00003 	ldbu	r7,0(r7)
     a2c:	2d8b883a 	add	r5,r5,r22
     a30:	d9c00515 	stw	r7,20(sp)
     a34:	29400003 	ldbu	r5,0(r5)
     a38:	d9400615 	stw	r5,24(sp)
     a3c:	25cb883a 	add	r5,r4,r23
     a40:	29400003 	ldbu	r5,0(r5)
     a44:	d9400715 	stw	r5,28(sp)
     a48:	254b883a 	add	r5,r4,r21
     a4c:	29400003 	ldbu	r5,0(r5)
     a50:	2589883a 	add	r4,r4,r22
     a54:	d9400815 	stw	r5,32(sp)
     a58:	21000003 	ldbu	r4,0(r4)
     a5c:	d9000915 	stw	r4,36(sp)
     a60:	15c9883a 	add	r4,r2,r23
     a64:	21000003 	ldbu	r4,0(r4)
     a68:	d9000a15 	stw	r4,40(sp)
              image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
     a6c:	1549883a 	add	r4,r2,r21
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i],
     a70:	21000003 	ldbu	r4,0(r4)
              image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
     a74:	1585883a 	add	r2,r2,r22
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i],
     a78:	d9000b15 	stw	r4,44(sp)
     a7c:	10800003 	ldbu	r2,0(r2)
     a80:	d8800c15 	stw	r2,48(sp)
              image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
     a84:	35c5883a 	add	r2,r6,r23
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i],
     a88:	10800003 	ldbu	r2,0(r2)
     a8c:	d8800d15 	stw	r2,52(sp)
              image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
     a90:	3545883a 	add	r2,r6,r21
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i],
     a94:	10800003 	ldbu	r2,0(r2)
              image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
     a98:	358d883a 	add	r6,r6,r22
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i],
     a9c:	d8800e15 	stw	r2,56(sp)
     aa0:	30800003 	ldbu	r2,0(r6)
     aa4:	0000e506 	br	e3c <medianFilter5x5+0x910>
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     aa8:	2dcf883a 	add	r7,r5,r23
     aac:	39c00003 	ldbu	r7,0(r7)
              int res =  Bubblesort_Number(array , size);
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
     ab0:	d8c02317 	ldw	r3,140(sp)
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     ab4:	d9c00415 	stw	r7,16(sp)
              int res =  Bubblesort_Number(array , size);
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
     ab8:	b8c02d1e 	bne	r23,r3,b70 <medianFilter5x5+0x644>
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     abc:	2d4f883a 	add	r7,r5,r21
     ac0:	39c00003 	ldbu	r7,0(r7)
     ac4:	d9c00515 	stw	r7,20(sp)
     ac8:	2d8f883a 	add	r7,r5,r22
     acc:	39c00003 	ldbu	r7,0(r7)
     ad0:	2c0b883a 	add	r5,r5,r16
     ad4:	d9c00615 	stw	r7,24(sp)
     ad8:	29400003 	ldbu	r5,0(r5)
     adc:	d9400715 	stw	r5,28(sp)
     ae0:	25cb883a 	add	r5,r4,r23
     ae4:	29400003 	ldbu	r5,0(r5)
     ae8:	d9400815 	stw	r5,32(sp)
     aec:	254b883a 	add	r5,r4,r21
     af0:	29400003 	ldbu	r5,0(r5)
     af4:	d9400915 	stw	r5,36(sp)
     af8:	258b883a 	add	r5,r4,r22
     afc:	29400003 	ldbu	r5,0(r5)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
     b00:	2409883a 	add	r4,r4,r16
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b04:	d9400a15 	stw	r5,40(sp)
     b08:	21000003 	ldbu	r4,0(r4)
     b0c:	d9000b15 	stw	r4,44(sp)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
     b10:	15c9883a 	add	r4,r2,r23
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b14:	21000003 	ldbu	r4,0(r4)
     b18:	d9000c15 	stw	r4,48(sp)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
     b1c:	1549883a 	add	r4,r2,r21
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b20:	21000003 	ldbu	r4,0(r4)
     b24:	d9000d15 	stw	r4,52(sp)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
     b28:	1589883a 	add	r4,r2,r22
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b2c:	21000003 	ldbu	r4,0(r4)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
     b30:	1405883a 	add	r2,r2,r16
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b34:	d9000e15 	stw	r4,56(sp)
     b38:	10800003 	ldbu	r2,0(r2)
     b3c:	d8800f15 	stw	r2,60(sp)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
     b40:	35c5883a 	add	r2,r6,r23
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b44:	10800003 	ldbu	r2,0(r2)
     b48:	d8801015 	stw	r2,64(sp)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
     b4c:	3545883a 	add	r2,r6,r21
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b50:	10800003 	ldbu	r2,0(r2)
     b54:	d8801115 	stw	r2,68(sp)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
     b58:	3585883a 	add	r2,r6,r22
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b5c:	10800003 	ldbu	r2,0(r2)
              image.Rows[j-1][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+1][i+1], image.Rows[j+2][i], image.Rows[j+2][i-1], image.Rows[j+2][i-2],
              image.Rows[j+2][i+1]};
     b60:	340d883a 	add	r6,r6,r16
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2],
     b64:	d8801215 	stw	r2,72(sp)
     b68:	30800003 	ldbu	r2,0(r6)
     b6c:	00018906 	br	1194 <medianFilter5x5+0xc68>
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     b70:	2c0f883a 	add	r7,r5,r16
     b74:	39c00003 	ldbu	r7,0(r7)
     b78:	d9c00515 	stw	r7,20(sp)
     b7c:	b9c00084 	addi	r7,r23,2
     b80:	29d7883a 	add	r11,r5,r7
     b84:	5ac00003 	ldbu	r11,0(r11)
     b88:	dac00615 	stw	r11,24(sp)
     b8c:	2d57883a 	add	r11,r5,r21
     b90:	5ac00003 	ldbu	r11,0(r11)
     b94:	2d8b883a 	add	r5,r5,r22
     b98:	dac00715 	stw	r11,28(sp)
     b9c:	29400003 	ldbu	r5,0(r5)
     ba0:	d9400815 	stw	r5,32(sp)
     ba4:	25cb883a 	add	r5,r4,r23
     ba8:	29400003 	ldbu	r5,0(r5)
     bac:	d9400915 	stw	r5,36(sp)
     bb0:	240b883a 	add	r5,r4,r16
     bb4:	29400003 	ldbu	r5,0(r5)
     bb8:	d9400a15 	stw	r5,40(sp)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
     bbc:	21cb883a 	add	r5,r4,r7
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     bc0:	29400003 	ldbu	r5,0(r5)
     bc4:	d9400b15 	stw	r5,44(sp)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
     bc8:	254b883a 	add	r5,r4,r21
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     bcc:	29400003 	ldbu	r5,0(r5)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
     bd0:	2589883a 	add	r4,r4,r22
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     bd4:	d9400c15 	stw	r5,48(sp)
     bd8:	21000003 	ldbu	r4,0(r4)
     bdc:	d9000d15 	stw	r4,52(sp)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
     be0:	15c9883a 	add	r4,r2,r23
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     be4:	21000003 	ldbu	r4,0(r4)
     be8:	d9000e15 	stw	r4,56(sp)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
     bec:	1409883a 	add	r4,r2,r16
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     bf0:	21000003 	ldbu	r4,0(r4)
     bf4:	d9000f15 	stw	r4,60(sp)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
     bf8:	11c9883a 	add	r4,r2,r7
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     bfc:	21000003 	ldbu	r4,0(r4)
     c00:	d9001015 	stw	r4,64(sp)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
     c04:	1549883a 	add	r4,r2,r21
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     c08:	21000003 	ldbu	r4,0(r4)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
              image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2]};
     c0c:	1585883a 	add	r2,r2,r22
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     c10:	d9001115 	stw	r4,68(sp)
     c14:	10800003 	ldbu	r2,0(r2)
     c18:	d8801215 	stw	r2,72(sp)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
              image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2]};
     c1c:	35c5883a 	add	r2,r6,r23
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     c20:	10800003 	ldbu	r2,0(r2)
     c24:	d8801315 	stw	r2,76(sp)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
              image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2]};
     c28:	3405883a 	add	r2,r6,r16
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     c2c:	10800003 	ldbu	r2,0(r2)
              image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1],
              image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2]};
     c30:	31cd883a 	add	r6,r6,r7
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
     c34:	d8801415 	stw	r2,80(sp)
     c38:	30800003 	ldbu	r2,0(r6)
     c3c:	00019006 	br	1280 <medianFilter5x5+0xd54>
              
              set_pixel(cloned_image, i, j, res);

            }

        }else if(j == image.size.height -1){
     c40:	d8c02417 	ldw	r3,144(sp)
     c44:	88c0ae1e 	bne	r17,r3,f00 <medianFilter5x5+0x9d4>
            if( i == 0){
     c48:	b800171e 	bne	r23,zero,ca8 <medianFilter5x5+0x77c>
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2]  ,image.Rows[j-1][i], image.Rows[j-2][i], image.Rows[j-1][i+1], image.Rows[j-2][i+2], 
     c4c:	98800017 	ldw	r2,0(r19)
     c50:	11000003 	ldbu	r4,0(r2)
     c54:	d9000415 	stw	r4,16(sp)
     c58:	11000043 	ldbu	r4,1(r2)
     c5c:	d9000515 	stw	r4,20(sp)
     c60:	10800083 	ldbu	r2,2(r2)
     c64:	d8800615 	stw	r2,24(sp)
     c68:	90800017 	ldw	r2,0(r18)
     c6c:	11000003 	ldbu	r4,0(r2)
     c70:	d9000715 	stw	r4,28(sp)
     c74:	a1000017 	ldw	r4,0(r20)
     c78:	21400003 	ldbu	r5,0(r4)
     c7c:	d9400815 	stw	r5,32(sp)
     c80:	11400043 	ldbu	r5,1(r2)
     c84:	d9400915 	stw	r5,36(sp)
     c88:	21400083 	ldbu	r5,2(r4)
     c8c:	d9400a15 	stw	r5,40(sp)
     c90:	21000043 	ldbu	r4,1(r4)
                image.Rows[j-2][i+1], image.Rows[j-1][i+2] };
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);
     c94:	01400244 	movi	r5,9

            }

        }else if(j == image.size.height -1){
            if( i == 0){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2]  ,image.Rows[j-1][i], image.Rows[j-2][i], image.Rows[j-1][i+1], image.Rows[j-2][i+2], 
     c98:	d9000b15 	stw	r4,44(sp)
     c9c:	10800083 	ldbu	r2,2(r2)
     ca0:	d8800c15 	stw	r2,48(sp)
     ca4:	003f2b06 	br	954 <__alt_data_end+0xf8000954>
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);


            }else if(i == 1){
     ca8:	b8801a1e 	bne	r23,r2,d14 <medianFilter5x5+0x7e8>
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i] , image.Rows[j-1][i+1] , image.Rows[j-1][i+2], 
     cac:	98800017 	ldw	r2,0(r19)
     cb0:	11000043 	ldbu	r4,1(r2)
     cb4:	d9000415 	stw	r4,16(sp)
     cb8:	11000083 	ldbu	r4,2(r2)
     cbc:	d9000515 	stw	r4,20(sp)
     cc0:	110000c3 	ldbu	r4,3(r2)
     cc4:	d9000615 	stw	r4,24(sp)
     cc8:	10800003 	ldbu	r2,0(r2)
     ccc:	d8800715 	stw	r2,28(sp)
     cd0:	90800017 	ldw	r2,0(r18)
     cd4:	11000043 	ldbu	r4,1(r2)
     cd8:	d9000815 	stw	r4,32(sp)
     cdc:	11000083 	ldbu	r4,2(r2)
     ce0:	d9000915 	stw	r4,36(sp)
     ce4:	110000c3 	ldbu	r4,3(r2)
     ce8:	d9000a15 	stw	r4,40(sp)
     cec:	10800003 	ldbu	r2,0(r2)
     cf0:	d8800b15 	stw	r2,44(sp)
                image.Rows[j-1][i-1] , image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1] };
     cf4:	a0800017 	ldw	r2,0(r20)

                set_pixel(cloned_image, i, j, res);


            }else if(i == 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i] , image.Rows[j-1][i+1] , image.Rows[j-1][i+2], 
     cf8:	11000043 	ldbu	r4,1(r2)
     cfc:	d9000c15 	stw	r4,48(sp)
     d00:	11000083 	ldbu	r4,2(r2)
     d04:	d9000d15 	stw	r4,52(sp)
     d08:	110000c3 	ldbu	r4,3(r2)
     d0c:	d9000e15 	stw	r4,56(sp)
     d10:	00004906 	br	e38 <medianFilter5x5+0x90c>
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if( i == image.size.width -1){
     d14:	d8c02017 	ldw	r3,128(sp)
     d18:	b8c0201e 	bne	r23,r3,d9c <medianFilter5x5+0x870>
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2]  ,image.Rows[j-1][i], image.Rows[j-2][i], image.Rows[j-1][i-1], image.Rows[j-2][i-2], 
     d1c:	98800017 	ldw	r2,0(r19)
     d20:	15c9883a 	add	r4,r2,r23
     d24:	21000003 	ldbu	r4,0(r4)
     d28:	d9000415 	stw	r4,16(sp)
     d2c:	1549883a 	add	r4,r2,r21
     d30:	21000003 	ldbu	r4,0(r4)
     d34:	1585883a 	add	r2,r2,r22
     d38:	d9000515 	stw	r4,20(sp)
     d3c:	10800003 	ldbu	r2,0(r2)
     d40:	d8800615 	stw	r2,24(sp)
     d44:	90800017 	ldw	r2,0(r18)
     d48:	15c9883a 	add	r4,r2,r23
     d4c:	21000003 	ldbu	r4,0(r4)
     d50:	d9000715 	stw	r4,28(sp)
     d54:	a1000017 	ldw	r4,0(r20)
     d58:	25cb883a 	add	r5,r4,r23
     d5c:	29400003 	ldbu	r5,0(r5)
     d60:	d9400815 	stw	r5,32(sp)
     d64:	154b883a 	add	r5,r2,r21
     d68:	29400003 	ldbu	r5,0(r5)
                image.Rows[j-2][i-1], image.Rows[j-1][i-2]  };
     d6c:	1585883a 	add	r2,r2,r22
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if( i == image.size.width -1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2]  ,image.Rows[j-1][i], image.Rows[j-2][i], image.Rows[j-1][i-1], image.Rows[j-2][i-2], 
     d70:	d9400915 	stw	r5,36(sp)
     d74:	258b883a 	add	r5,r4,r22
     d78:	29400003 	ldbu	r5,0(r5)
                image.Rows[j-2][i-1], image.Rows[j-1][i-2]  };
     d7c:	2549883a 	add	r4,r4,r21
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if( i == image.size.width -1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2]  ,image.Rows[j-1][i], image.Rows[j-2][i], image.Rows[j-1][i-1], image.Rows[j-2][i-2], 
     d80:	d9400a15 	stw	r5,40(sp)
     d84:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-2][i-1], image.Rows[j-1][i-2]  };
                int size = sizeof(array)/sizeof(array[0]);
                int res =  Bubblesort_Number(array , size);
     d88:	01400244 	movi	r5,9
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if( i == image.size.width -1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2]  ,image.Rows[j-1][i], image.Rows[j-2][i], image.Rows[j-1][i-1], image.Rows[j-2][i-2], 
     d8c:	d9000b15 	stw	r4,44(sp)
     d90:	10800003 	ldbu	r2,0(r2)
     d94:	d8800c15 	stw	r2,48(sp)
     d98:	00021e06 	br	1614 <medianFilter5x5+0x10e8>


                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i] , image.Rows[j-1][i-1] , image.Rows[j-1][i-2], 
     d9c:	98800017 	ldw	r2,0(r19)
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width -2){
     da0:	d8c02317 	ldw	r3,140(sp)
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i] , image.Rows[j-1][i-1] , image.Rows[j-1][i-2], 
     da4:	15c9883a 	add	r4,r2,r23
     da8:	21000003 	ldbu	r4,0(r4)
     dac:	d9000415 	stw	r4,16(sp)
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width -2){
     db0:	b8c0251e 	bne	r23,r3,e48 <medianFilter5x5+0x91c>
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i] , image.Rows[j-1][i-1] , image.Rows[j-1][i-2], 
     db4:	1549883a 	add	r4,r2,r21
     db8:	21000003 	ldbu	r4,0(r4)
     dbc:	d9000515 	stw	r4,20(sp)
     dc0:	1589883a 	add	r4,r2,r22
     dc4:	21000003 	ldbu	r4,0(r4)
     dc8:	1405883a 	add	r2,r2,r16
     dcc:	d9000615 	stw	r4,24(sp)
     dd0:	10800003 	ldbu	r2,0(r2)
     dd4:	d8800715 	stw	r2,28(sp)
     dd8:	90800017 	ldw	r2,0(r18)
     ddc:	15c9883a 	add	r4,r2,r23
     de0:	21000003 	ldbu	r4,0(r4)
     de4:	d9000815 	stw	r4,32(sp)
     de8:	1549883a 	add	r4,r2,r21
     dec:	21000003 	ldbu	r4,0(r4)
     df0:	d9000915 	stw	r4,36(sp)
     df4:	1589883a 	add	r4,r2,r22
     df8:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-1][i+1] , image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j-2][i+1]  };
     dfc:	1405883a 	add	r2,r2,r16


                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i] , image.Rows[j-1][i-1] , image.Rows[j-1][i-2], 
     e00:	d9000a15 	stw	r4,40(sp)
     e04:	10800003 	ldbu	r2,0(r2)
     e08:	d8800b15 	stw	r2,44(sp)
                image.Rows[j-1][i+1] , image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j-2][i+1]  };
     e0c:	a0800017 	ldw	r2,0(r20)
     e10:	15c9883a 	add	r4,r2,r23


                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i] , image.Rows[j-1][i-1] , image.Rows[j-1][i-2], 
     e14:	21000003 	ldbu	r4,0(r4)
     e18:	d9000c15 	stw	r4,48(sp)
                image.Rows[j-1][i+1] , image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j-2][i+1]  };
     e1c:	1549883a 	add	r4,r2,r21


                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i] , image.Rows[j-1][i-1] , image.Rows[j-1][i-2], 
     e20:	21000003 	ldbu	r4,0(r4)
     e24:	d9000d15 	stw	r4,52(sp)
                image.Rows[j-1][i+1] , image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j-2][i+1]  };
     e28:	1589883a 	add	r4,r2,r22


                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i] , image.Rows[j-1][i-1] , image.Rows[j-1][i-2], 
     e2c:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-1][i+1] , image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j-2][i+1]  };
     e30:	1405883a 	add	r2,r2,r16


                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width -2){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j-1][i] , image.Rows[j-1][i-1] , image.Rows[j-1][i-2], 
     e34:	d9000e15 	stw	r4,56(sp)
     e38:	10800003 	ldbu	r2,0(r2)
     e3c:	d8800f15 	stw	r2,60(sp)
                image.Rows[j-1][i+1] , image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j-2][i+1]  };
                int size = sizeof(array)/sizeof(array[0]);
                int res =  Bubblesort_Number(array , size);
     e40:	01400304 	movi	r5,12
     e44:	0001f306 	br	1614 <medianFilter5x5+0x10e8>


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     e48:	1409883a 	add	r4,r2,r16
     e4c:	21000003 	ldbu	r4,0(r4)
     e50:	d9000515 	stw	r4,20(sp)
     e54:	b9000084 	addi	r4,r23,2
     e58:	110b883a 	add	r5,r2,r4
     e5c:	29400003 	ldbu	r5,0(r5)
     e60:	d9400615 	stw	r5,24(sp)
     e64:	154b883a 	add	r5,r2,r21
     e68:	29400003 	ldbu	r5,0(r5)
     e6c:	1585883a 	add	r2,r2,r22
     e70:	d9400715 	stw	r5,28(sp)
     e74:	10800003 	ldbu	r2,0(r2)
     e78:	d8800815 	stw	r2,32(sp)
     e7c:	90800017 	ldw	r2,0(r18)
     e80:	15cb883a 	add	r5,r2,r23
     e84:	29400003 	ldbu	r5,0(r5)
     e88:	d9400915 	stw	r5,36(sp)
     e8c:	140b883a 	add	r5,r2,r16
     e90:	29400003 	ldbu	r5,0(r5)
     e94:	d9400a15 	stw	r5,40(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1],
     e98:	110b883a 	add	r5,r2,r4
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     e9c:	29400003 	ldbu	r5,0(r5)
     ea0:	d9400b15 	stw	r5,44(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1],
     ea4:	154b883a 	add	r5,r2,r21
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     ea8:	29800003 	ldbu	r6,0(r5)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1],
     eac:	1585883a 	add	r2,r2,r22
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     eb0:	d9800c15 	stw	r6,48(sp)
     eb4:	29400003 	ldbu	r5,0(r5)
     eb8:	d9400d15 	stw	r5,52(sp)
     ebc:	10800003 	ldbu	r2,0(r2)
     ec0:	d8800e15 	stw	r2,56(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1],
     ec4:	a0800017 	ldw	r2,0(r20)
     ec8:	15cb883a 	add	r5,r2,r23
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     ecc:	29400003 	ldbu	r5,0(r5)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1],
     ed0:	1109883a 	add	r4,r2,r4
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     ed4:	d9400f15 	stw	r5,60(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1],
     ed8:	140b883a 	add	r5,r2,r16
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     edc:	29400003 	ldbu	r5,0(r5)
     ee0:	d9401015 	stw	r5,64(sp)
     ee4:	21000003 	ldbu	r4,0(r4)
     ee8:	d9001115 	stw	r4,68(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1],
     eec:	1549883a 	add	r4,r2,r21
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     ef0:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1],
                image.Rows[j-2][i-2] };
     ef4:	1585883a 	add	r2,r2,r22
                int res =  Bubblesort_Number(array , size);


                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i] , image.Rows[j][i+1], image.Rows[j][i+2] , image.Rows[j][i-1] , image.Rows[j][i-2] , image.Rows[j-1][i] , image.Rows[j-1][i+1],
     ef8:	d9001215 	stw	r4,72(sp)
     efc:	0000a406 	br	1190 <medianFilter5x5+0xc64>
                set_pixel(cloned_image, i, j, res);
                
            }


        }else if(j == image.size.height -2){
     f00:	d8c02517 	ldw	r3,148(sp)
     f04:	88c0e11e 	bne	r17,r3,128c <medianFilter5x5+0xd60>
            if(i == 0){
     f08:	b8001d1e 	bne	r23,zero,f80 <medianFilter5x5+0xa54>
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j-1][i],
     f0c:	98800017 	ldw	r2,0(r19)
     f10:	d8c01e17 	ldw	r3,120(sp)
     f14:	11000003 	ldbu	r4,0(r2)
     f18:	d9000415 	stw	r4,16(sp)
     f1c:	11000043 	ldbu	r4,1(r2)
     f20:	d9000515 	stw	r4,20(sp)
     f24:	10800083 	ldbu	r2,2(r2)
     f28:	d8800615 	stw	r2,24(sp)
     f2c:	18800017 	ldw	r2,0(r3)
     f30:	11000003 	ldbu	r4,0(r2)
     f34:	d9000715 	stw	r4,28(sp)
     f38:	11000043 	ldbu	r4,1(r2)
     f3c:	d9000815 	stw	r4,32(sp)
     f40:	10800083 	ldbu	r2,2(r2)
     f44:	d8800915 	stw	r2,36(sp)
     f48:	90800017 	ldw	r2,0(r18)
     f4c:	11000003 	ldbu	r4,0(r2)
     f50:	d9000a15 	stw	r4,40(sp)
     f54:	11000043 	ldbu	r4,1(r2)
     f58:	d9000b15 	stw	r4,44(sp)
     f5c:	10800083 	ldbu	r2,2(r2)
     f60:	d8800c15 	stw	r2,48(sp)
              image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2]};
     f64:	a0800017 	ldw	r2,0(r20)
            }


        }else if(j == image.size.height -2){
            if(i == 0){
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j-1][i],
     f68:	11000003 	ldbu	r4,0(r2)
     f6c:	d9000d15 	stw	r4,52(sp)
     f70:	11000043 	ldbu	r4,1(r2)
     f74:	d9000e15 	stw	r4,56(sp)
     f78:	10800083 	ldbu	r2,2(r2)
     f7c:	003e7306 	br	94c <__alt_data_end+0xf800094c>
              int res =  Bubblesort_Number(array , size);
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == 1){
     f80:	b880241e 	bne	r23,r2,1014 <medianFilter5x5+0xae8>
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2],
     f84:	98800017 	ldw	r2,0(r19)
     f88:	d8c01e17 	ldw	r3,120(sp)
     f8c:	11000043 	ldbu	r4,1(r2)
     f90:	d9000415 	stw	r4,16(sp)
     f94:	11000083 	ldbu	r4,2(r2)
     f98:	d9000515 	stw	r4,20(sp)
     f9c:	110000c3 	ldbu	r4,3(r2)
     fa0:	d9000615 	stw	r4,24(sp)
     fa4:	10800003 	ldbu	r2,0(r2)
     fa8:	d8800715 	stw	r2,28(sp)
     fac:	18800017 	ldw	r2,0(r3)
     fb0:	11000043 	ldbu	r4,1(r2)
     fb4:	d9000815 	stw	r4,32(sp)
     fb8:	11000083 	ldbu	r4,2(r2)
     fbc:	d9000915 	stw	r4,36(sp)
     fc0:	110000c3 	ldbu	r4,3(r2)
     fc4:	d9000a15 	stw	r4,40(sp)
     fc8:	10800003 	ldbu	r2,0(r2)
     fcc:	d8800b15 	stw	r2,44(sp)
              image.Rows[j+1][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2],
     fd0:	90800017 	ldw	r2,0(r18)
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == 1){
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2],
     fd4:	11000043 	ldbu	r4,1(r2)
     fd8:	d9000c15 	stw	r4,48(sp)
     fdc:	11000083 	ldbu	r4,2(r2)
     fe0:	d9000d15 	stw	r4,52(sp)
     fe4:	110000c3 	ldbu	r4,3(r2)
     fe8:	d9000e15 	stw	r4,56(sp)
     fec:	10800003 	ldbu	r2,0(r2)
     ff0:	d8800f15 	stw	r2,60(sp)
              image.Rows[j+1][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2],
     ff4:	a0800017 	ldw	r2,0(r20)
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == 1){
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2],
     ff8:	11000043 	ldbu	r4,1(r2)
     ffc:	d9001015 	stw	r4,64(sp)
    1000:	11000083 	ldbu	r4,2(r2)
    1004:	d9001115 	stw	r4,68(sp)
    1008:	110000c3 	ldbu	r4,3(r2)
    100c:	d9001215 	stw	r4,72(sp)
    1010:	00005f06 	br	1190 <medianFilter5x5+0xc64>
              
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
    1014:	d8c02017 	ldw	r3,128(sp)
    1018:	b8c0281e 	bne	r23,r3,10bc <medianFilter5x5+0xb90>
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i],
    101c:	98800017 	ldw	r2,0(r19)
    1020:	d8c01e17 	ldw	r3,120(sp)
    1024:	15c9883a 	add	r4,r2,r23
    1028:	21000003 	ldbu	r4,0(r4)
    102c:	d9000415 	stw	r4,16(sp)
    1030:	1549883a 	add	r4,r2,r21
    1034:	21000003 	ldbu	r4,0(r4)
    1038:	1585883a 	add	r2,r2,r22
    103c:	d9000515 	stw	r4,20(sp)
    1040:	10800003 	ldbu	r2,0(r2)
    1044:	d8800615 	stw	r2,24(sp)
    1048:	18800017 	ldw	r2,0(r3)
    104c:	15c9883a 	add	r4,r2,r23
    1050:	21000003 	ldbu	r4,0(r4)
    1054:	d9000715 	stw	r4,28(sp)
    1058:	1549883a 	add	r4,r2,r21
    105c:	21000003 	ldbu	r4,0(r4)
    1060:	1585883a 	add	r2,r2,r22
    1064:	d9000815 	stw	r4,32(sp)
    1068:	10800003 	ldbu	r2,0(r2)
    106c:	d8800915 	stw	r2,36(sp)
    1070:	90800017 	ldw	r2,0(r18)
    1074:	15c9883a 	add	r4,r2,r23
    1078:	21000003 	ldbu	r4,0(r4)
    107c:	d9000a15 	stw	r4,40(sp)
              image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2]};
    1080:	1549883a 	add	r4,r2,r21
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i],
    1084:	21000003 	ldbu	r4,0(r4)
              image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2]};
    1088:	1585883a 	add	r2,r2,r22
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i],
    108c:	d9000b15 	stw	r4,44(sp)
    1090:	10800003 	ldbu	r2,0(r2)
    1094:	d8800c15 	stw	r2,48(sp)
              image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2]};
    1098:	a0800017 	ldw	r2,0(r20)
    109c:	15c9883a 	add	r4,r2,r23
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i],
    10a0:	21000003 	ldbu	r4,0(r4)
    10a4:	d9000d15 	stw	r4,52(sp)
              image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2]};
    10a8:	1549883a 	add	r4,r2,r21
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i],
    10ac:	21000003 	ldbu	r4,0(r4)
              image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2]};
    10b0:	1585883a 	add	r2,r2,r22
              
              set_pixel(cloned_image, i, j, res);


            }else if(i == image.size.width -1){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i],
    10b4:	d9000e15 	stw	r4,56(sp)
    10b8:	003f5f06 	br	e38 <__alt_data_end+0xf8000e38>
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    10bc:	98800017 	ldw	r2,0(r19)
              int res =  Bubblesort_Number(array , size);
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
    10c0:	d8c02317 	ldw	r3,140(sp)
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    10c4:	15c9883a 	add	r4,r2,r23
    10c8:	21000003 	ldbu	r4,0(r4)
    10cc:	d9000415 	stw	r4,16(sp)
              int res =  Bubblesort_Number(array , size);
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
    10d0:	b8c0341e 	bne	r23,r3,11a4 <medianFilter5x5+0xc78>
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    10d4:	1549883a 	add	r4,r2,r21
    10d8:	21000003 	ldbu	r4,0(r4)
    10dc:	d8c01e17 	ldw	r3,120(sp)
    10e0:	d9000515 	stw	r4,20(sp)
    10e4:	1589883a 	add	r4,r2,r22
    10e8:	21000003 	ldbu	r4,0(r4)
    10ec:	1405883a 	add	r2,r2,r16
    10f0:	d9000615 	stw	r4,24(sp)
    10f4:	10800003 	ldbu	r2,0(r2)
    10f8:	d8800715 	stw	r2,28(sp)
    10fc:	18800017 	ldw	r2,0(r3)
    1100:	15c9883a 	add	r4,r2,r23
    1104:	21000003 	ldbu	r4,0(r4)
    1108:	d9000815 	stw	r4,32(sp)
    110c:	1549883a 	add	r4,r2,r21
    1110:	21000003 	ldbu	r4,0(r4)
    1114:	d9000915 	stw	r4,36(sp)
    1118:	1589883a 	add	r4,r2,r22
    111c:	21000003 	ldbu	r4,0(r4)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
    1120:	1405883a 	add	r2,r2,r16
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    1124:	d9000a15 	stw	r4,40(sp)
    1128:	10800003 	ldbu	r2,0(r2)
    112c:	d8800b15 	stw	r2,44(sp)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
    1130:	90800017 	ldw	r2,0(r18)
    1134:	15c9883a 	add	r4,r2,r23
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    1138:	21000003 	ldbu	r4,0(r4)
    113c:	d9000c15 	stw	r4,48(sp)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
    1140:	1549883a 	add	r4,r2,r21
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    1144:	21000003 	ldbu	r4,0(r4)
    1148:	d9000d15 	stw	r4,52(sp)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
    114c:	1589883a 	add	r4,r2,r22
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    1150:	21000003 	ldbu	r4,0(r4)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
    1154:	1405883a 	add	r2,r2,r16
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    1158:	d9000e15 	stw	r4,56(sp)
    115c:	10800003 	ldbu	r2,0(r2)
    1160:	d8800f15 	stw	r2,60(sp)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
    1164:	a0800017 	ldw	r2,0(r20)
    1168:	15c9883a 	add	r4,r2,r23
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    116c:	21000003 	ldbu	r4,0(r4)
    1170:	d9001015 	stw	r4,64(sp)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
    1174:	1549883a 	add	r4,r2,r21
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    1178:	21000003 	ldbu	r4,0(r4)
    117c:	d9001115 	stw	r4,68(sp)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
    1180:	1589883a 	add	r4,r2,r22
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    1184:	21000003 	ldbu	r4,0(r4)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
              image.Rows[j-2][i+1]};
    1188:	1405883a 	add	r2,r2,r16
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    118c:	d9001215 	stw	r4,72(sp)
    1190:	10800003 	ldbu	r2,0(r2)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
              image.Rows[j-2][i+1]};
              int size = sizeof(array)/sizeof(array[0]);
              int res =  Bubblesort_Number(array , size);
    1194:	01400404 	movi	r5,16
              
              
              set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 2){
              int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j][i+1], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2],
    1198:	d8801315 	stw	r2,76(sp)
              image.Rows[j+1][i+1], image.Rows[j-1][i], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-1][i+1], image.Rows[j-2][i], image.Rows[j-2][i-1], image.Rows[j-2][i-2],
              image.Rows[j-2][i+1]};
              int size = sizeof(array)/sizeof(array[0]);
              int res =  Bubblesort_Number(array , size);
    119c:	d949883a 	add	r4,sp,r5
    11a0:	00011d06 	br	1618 <medianFilter5x5+0x10ec>
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    11a4:	1409883a 	add	r4,r2,r16
    11a8:	21000003 	ldbu	r4,0(r4)
    11ac:	d8c01e17 	ldw	r3,120(sp)
    11b0:	d9000515 	stw	r4,20(sp)
    11b4:	b9000084 	addi	r4,r23,2
    11b8:	110b883a 	add	r5,r2,r4
    11bc:	29400003 	ldbu	r5,0(r5)
    11c0:	d9400615 	stw	r5,24(sp)
    11c4:	154b883a 	add	r5,r2,r21
    11c8:	29400003 	ldbu	r5,0(r5)
    11cc:	1585883a 	add	r2,r2,r22
    11d0:	d9400715 	stw	r5,28(sp)
    11d4:	10800003 	ldbu	r2,0(r2)
    11d8:	d8800815 	stw	r2,32(sp)
    11dc:	18800017 	ldw	r2,0(r3)
    11e0:	15cb883a 	add	r5,r2,r23
    11e4:	29400003 	ldbu	r5,0(r5)
    11e8:	d9400915 	stw	r5,36(sp)
    11ec:	140b883a 	add	r5,r2,r16
    11f0:	29400003 	ldbu	r5,0(r5)
    11f4:	d9400a15 	stw	r5,40(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
    11f8:	110b883a 	add	r5,r2,r4
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    11fc:	29400003 	ldbu	r5,0(r5)
    1200:	d9400b15 	stw	r5,44(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
    1204:	154b883a 	add	r5,r2,r21
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1208:	29400003 	ldbu	r5,0(r5)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
    120c:	1585883a 	add	r2,r2,r22
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1210:	d9400c15 	stw	r5,48(sp)
    1214:	10800003 	ldbu	r2,0(r2)
    1218:	d8800d15 	stw	r2,52(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
    121c:	90800017 	ldw	r2,0(r18)
    1220:	15cb883a 	add	r5,r2,r23
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1224:	29400003 	ldbu	r5,0(r5)
    1228:	d9400e15 	stw	r5,56(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
    122c:	140b883a 	add	r5,r2,r16
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1230:	29400003 	ldbu	r5,0(r5)
    1234:	d9400f15 	stw	r5,60(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
    1238:	110b883a 	add	r5,r2,r4
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    123c:	29400003 	ldbu	r5,0(r5)
    1240:	d9401015 	stw	r5,64(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
    1244:	154b883a 	add	r5,r2,r21
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1248:	29400003 	ldbu	r5,0(r5)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
              image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2]};
    124c:	1585883a 	add	r2,r2,r22
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1250:	d9401115 	stw	r5,68(sp)
    1254:	10800003 	ldbu	r2,0(r2)
    1258:	d8801215 	stw	r2,72(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
              image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2]};
    125c:	a0800017 	ldw	r2,0(r20)
    1260:	15cb883a 	add	r5,r2,r23
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1264:	29400003 	ldbu	r5,0(r5)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
              image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2]};
    1268:	1109883a 	add	r4,r2,r4
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    126c:	d9401315 	stw	r5,76(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
              image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2]};
    1270:	140b883a 	add	r5,r2,r16
              
              
              set_pixel(cloned_image, i, j, res);
                
            }else{
              int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1274:	29400003 	ldbu	r5,0(r5)
    1278:	d9401415 	stw	r5,80(sp)
    127c:	20800003 	ldbu	r2,0(r4)
    1280:	d8801515 	stw	r2,84(sp)
              image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-1][i-1],
              image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2]};
              int size = sizeof(array)/sizeof(array[0]);
              int res =  Bubblesort_Number(array , size);
    1284:	01400484 	movi	r5,18
    1288:	0000e206 	br	1614 <medianFilter5x5+0x10e8>

            }


        }else{
            if(i == 0){
    128c:	b800271e 	bne	r23,zero,132c <medianFilter5x5+0xe00>
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2],image.Rows[j-1][i] , image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-2][i], 
    1290:	98800017 	ldw	r2,0(r19)
                image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+2][i], image.Rows[j+2][i+1],
    1294:	d8c01e17 	ldw	r3,120(sp)
                image.Rows[j+2][i+2]};
                int size = sizeof(array)/sizeof(array[0]);

                int res = Bubblesort_Number(array , size);
    1298:	014003c4 	movi	r5,15
            }


        }else{
            if(i == 0){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2],image.Rows[j-1][i] , image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-2][i], 
    129c:	11000003 	ldbu	r4,0(r2)
    12a0:	d9000415 	stw	r4,16(sp)
    12a4:	11000043 	ldbu	r4,1(r2)
    12a8:	d9000515 	stw	r4,20(sp)
    12ac:	10800083 	ldbu	r2,2(r2)
    12b0:	d8800615 	stw	r2,24(sp)
    12b4:	90800017 	ldw	r2,0(r18)
    12b8:	11000003 	ldbu	r4,0(r2)
    12bc:	d9000715 	stw	r4,28(sp)
    12c0:	11000043 	ldbu	r4,1(r2)
    12c4:	d9000815 	stw	r4,32(sp)
    12c8:	10800083 	ldbu	r2,2(r2)
    12cc:	d8800915 	stw	r2,36(sp)
    12d0:	a0800017 	ldw	r2,0(r20)
    12d4:	11000003 	ldbu	r4,0(r2)
    12d8:	d9000a15 	stw	r4,40(sp)
    12dc:	11000043 	ldbu	r4,1(r2)
    12e0:	d9000b15 	stw	r4,44(sp)
    12e4:	10800083 	ldbu	r2,2(r2)
    12e8:	d8800c15 	stw	r2,48(sp)
                image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+2][i], image.Rows[j+2][i+1],
    12ec:	18800017 	ldw	r2,0(r3)
    12f0:	d8c01f17 	ldw	r3,124(sp)
            }


        }else{
            if(i == 0){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2],image.Rows[j-1][i] , image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-2][i], 
    12f4:	11000003 	ldbu	r4,0(r2)
    12f8:	d9000d15 	stw	r4,52(sp)
    12fc:	11000043 	ldbu	r4,1(r2)
    1300:	d9000e15 	stw	r4,56(sp)
    1304:	10800083 	ldbu	r2,2(r2)
    1308:	d8800f15 	stw	r2,60(sp)
                image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j+1][i], image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+2][i], image.Rows[j+2][i+1],
    130c:	18800017 	ldw	r2,0(r3)
            }


        }else{
            if(i == 0){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2],image.Rows[j-1][i] , image.Rows[j-1][i+1], image.Rows[j-1][i+2], image.Rows[j-2][i], 
    1310:	11000003 	ldbu	r4,0(r2)
    1314:	d9001015 	stw	r4,64(sp)
    1318:	11000043 	ldbu	r4,1(r2)
    131c:	d9001115 	stw	r4,68(sp)
    1320:	10800083 	ldbu	r2,2(r2)
    1324:	d8801215 	stw	r2,72(sp)
    1328:	003d8a06 	br	954 <__alt_data_end+0xf8000954>
                int size = sizeof(array)/sizeof(array[0]);

                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else if(i == 1){
    132c:	b880311e 	bne	r23,r2,13f4 <medianFilter5x5+0xec8>
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], 
    1330:	98800017 	ldw	r2,0(r19)
                image.Rows[j-1][i-1], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1334:	d8c01e17 	ldw	r3,120(sp)
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1]};
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);
    1338:	01400504 	movi	r5,20

                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else if(i == 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], 
    133c:	11000043 	ldbu	r4,1(r2)
    1340:	d9000415 	stw	r4,16(sp)
    1344:	11000083 	ldbu	r4,2(r2)
    1348:	d9000515 	stw	r4,20(sp)
    134c:	110000c3 	ldbu	r4,3(r2)
    1350:	d9000615 	stw	r4,24(sp)
    1354:	10800003 	ldbu	r2,0(r2)
    1358:	d8800715 	stw	r2,28(sp)
    135c:	90800017 	ldw	r2,0(r18)
    1360:	11000043 	ldbu	r4,1(r2)
    1364:	d9000815 	stw	r4,32(sp)
    1368:	11000083 	ldbu	r4,2(r2)
    136c:	d9000915 	stw	r4,36(sp)
    1370:	110000c3 	ldbu	r4,3(r2)
    1374:	d9000a15 	stw	r4,40(sp)
    1378:	10800003 	ldbu	r2,0(r2)
    137c:	d8800b15 	stw	r2,44(sp)
                image.Rows[j-1][i-1], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    1380:	a0800017 	ldw	r2,0(r20)

                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else if(i == 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], 
    1384:	11000043 	ldbu	r4,1(r2)
    1388:	d9000c15 	stw	r4,48(sp)
    138c:	11000083 	ldbu	r4,2(r2)
    1390:	d9000d15 	stw	r4,52(sp)
    1394:	110000c3 	ldbu	r4,3(r2)
    1398:	d9000e15 	stw	r4,56(sp)
    139c:	10800003 	ldbu	r2,0(r2)
    13a0:	d8800f15 	stw	r2,60(sp)
                image.Rows[j-1][i-1], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], 
    13a4:	18800017 	ldw	r2,0(r3)

                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else if(i == 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], 
    13a8:	11000043 	ldbu	r4,1(r2)
    13ac:	d9001015 	stw	r4,64(sp)
    13b0:	11000083 	ldbu	r4,2(r2)
    13b4:	d9001115 	stw	r4,68(sp)
    13b8:	110000c3 	ldbu	r4,3(r2)
                image.Rows[j-1][i-1], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], 
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1]};
    13bc:	d8c01f17 	ldw	r3,124(sp)

                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else if(i == 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], 
    13c0:	d9001215 	stw	r4,72(sp)
    13c4:	10800003 	ldbu	r2,0(r2)
    13c8:	d8801315 	stw	r2,76(sp)
                image.Rows[j-1][i-1], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], image.Rows[j+1][i], image.Rows[j+1][i+1], 
                image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+2][i], image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1]};
    13cc:	18800017 	ldw	r2,0(r3)

                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else if(i == 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j-1][i], image.Rows[j-1][i+1], image.Rows[j-1][i+2], 
    13d0:	11000043 	ldbu	r4,1(r2)
    13d4:	d9001415 	stw	r4,80(sp)
    13d8:	11000083 	ldbu	r4,2(r2)
    13dc:	d9001515 	stw	r4,84(sp)
    13e0:	110000c3 	ldbu	r4,3(r2)
    13e4:	d9001615 	stw	r4,88(sp)
    13e8:	10800003 	ldbu	r2,0(r2)
    13ec:	d8801715 	stw	r2,92(sp)
    13f0:	00008806 	br	1614 <medianFilter5x5+0x10e8>
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    13f4:	98800017 	ldw	r2,0(r19)
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
    13f8:	d8c02017 	ldw	r3,128(sp)
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    13fc:	15c9883a 	add	r4,r2,r23
    1400:	21000003 	ldbu	r4,0(r4)
    1404:	d9000415 	stw	r4,16(sp)
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
    1408:	b8c0321e 	bne	r23,r3,14d4 <medianFilter5x5+0xfa8>
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    140c:	1549883a 	add	r4,r2,r21
    1410:	21000003 	ldbu	r4,0(r4)
    1414:	1585883a 	add	r2,r2,r22
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
    1418:	d8c01e17 	ldw	r3,120(sp)
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    141c:	d9000515 	stw	r4,20(sp)
    1420:	10800003 	ldbu	r2,0(r2)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
                image.Rows[j+2][i-2]};
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);
    1424:	014003c4 	movi	r5,15
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    1428:	d8800615 	stw	r2,24(sp)
    142c:	90800017 	ldw	r2,0(r18)
    1430:	15c9883a 	add	r4,r2,r23
    1434:	21000003 	ldbu	r4,0(r4)
    1438:	d9000715 	stw	r4,28(sp)
    143c:	1549883a 	add	r4,r2,r21
    1440:	21000003 	ldbu	r4,0(r4)
    1444:	1585883a 	add	r2,r2,r22
    1448:	d9000815 	stw	r4,32(sp)
    144c:	10800003 	ldbu	r2,0(r2)
    1450:	d8800915 	stw	r2,36(sp)
    1454:	a0800017 	ldw	r2,0(r20)
    1458:	15c9883a 	add	r4,r2,r23
    145c:	21000003 	ldbu	r4,0(r4)
    1460:	d9000a15 	stw	r4,40(sp)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
    1464:	1549883a 	add	r4,r2,r21
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    1468:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
    146c:	1585883a 	add	r2,r2,r22
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    1470:	d9000b15 	stw	r4,44(sp)
    1474:	10800003 	ldbu	r2,0(r2)
    1478:	d8800c15 	stw	r2,48(sp)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
    147c:	18800017 	ldw	r2,0(r3)
    1480:	d8c01f17 	ldw	r3,124(sp)
    1484:	15c9883a 	add	r4,r2,r23
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    1488:	21000003 	ldbu	r4,0(r4)
    148c:	d9000d15 	stw	r4,52(sp)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
    1490:	1549883a 	add	r4,r2,r21
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    1494:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
    1498:	1585883a 	add	r2,r2,r22
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    149c:	d9000e15 	stw	r4,56(sp)
    14a0:	10800003 	ldbu	r2,0(r2)
    14a4:	d8800f15 	stw	r2,60(sp)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
    14a8:	18800017 	ldw	r2,0(r3)
    14ac:	15c9883a 	add	r4,r2,r23
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    14b0:	21000003 	ldbu	r4,0(r4)
    14b4:	d9001015 	stw	r4,64(sp)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
    14b8:	1549883a 	add	r4,r2,r21
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    14bc:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-2][i-1], image.Rows[j-2][i-2], image.Rows[j+1][i], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], image.Rows[j+2][i-1],
                image.Rows[j+2][i-2]};
    14c0:	1585883a 	add	r2,r2,r22
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);

            }else if(i == image.size.width - 1){
                int array[] = {image.Rows[j][i], image.Rows[j][i-1], image.Rows[j][i-2],image.Rows[j-1][i] , image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], 
    14c4:	d9001115 	stw	r4,68(sp)
    14c8:	10800003 	ldbu	r2,0(r2)
    14cc:	d8801215 	stw	r2,72(sp)
    14d0:	00005006 	br	1614 <medianFilter5x5+0x10e8>
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    14d4:	1409883a 	add	r4,r2,r16
    14d8:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    14dc:	d8c01e17 	ldw	r3,120(sp)
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    14e0:	d9000515 	stw	r4,20(sp)
    14e4:	b9000084 	addi	r4,r23,2
    14e8:	110b883a 	add	r5,r2,r4
    14ec:	29400003 	ldbu	r5,0(r5)
    14f0:	d9400615 	stw	r5,24(sp)
    14f4:	154b883a 	add	r5,r2,r21
    14f8:	29400003 	ldbu	r5,0(r5)
    14fc:	1585883a 	add	r2,r2,r22
    1500:	d9400715 	stw	r5,28(sp)
    1504:	10800003 	ldbu	r2,0(r2)
    1508:	d8800815 	stw	r2,32(sp)
    150c:	90800017 	ldw	r2,0(r18)
    1510:	15cb883a 	add	r5,r2,r23
    1514:	29400003 	ldbu	r5,0(r5)
    1518:	d9400915 	stw	r5,36(sp)
    151c:	140b883a 	add	r5,r2,r16
    1520:	29400003 	ldbu	r5,0(r5)
    1524:	d9400a15 	stw	r5,40(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
    1528:	110b883a 	add	r5,r2,r4
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    152c:	29400003 	ldbu	r5,0(r5)
    1530:	d9400b15 	stw	r5,44(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
    1534:	154b883a 	add	r5,r2,r21
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1538:	29400003 	ldbu	r5,0(r5)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
    153c:	1585883a 	add	r2,r2,r22
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1540:	d9400c15 	stw	r5,48(sp)
    1544:	10800003 	ldbu	r2,0(r2)
    1548:	d8800d15 	stw	r2,52(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
    154c:	a0800017 	ldw	r2,0(r20)
    1550:	15cb883a 	add	r5,r2,r23
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1554:	29400003 	ldbu	r5,0(r5)
    1558:	d9400e15 	stw	r5,56(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
    155c:	140b883a 	add	r5,r2,r16
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1560:	29400003 	ldbu	r5,0(r5)
    1564:	d9400f15 	stw	r5,60(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
    1568:	110b883a 	add	r5,r2,r4
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    156c:	29400003 	ldbu	r5,0(r5)
    1570:	d9401015 	stw	r5,64(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
    1574:	154b883a 	add	r5,r2,r21
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1578:	29400003 	ldbu	r5,0(r5)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    157c:	1585883a 	add	r2,r2,r22
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1580:	d9401115 	stw	r5,68(sp)
    1584:	10800003 	ldbu	r2,0(r2)
    1588:	d8801215 	stw	r2,72(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    158c:	18800017 	ldw	r2,0(r3)
    1590:	15cb883a 	add	r5,r2,r23
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1594:	29400003 	ldbu	r5,0(r5)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    1598:	d8c01f17 	ldw	r3,124(sp)
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    159c:	d9401315 	stw	r5,76(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    15a0:	140b883a 	add	r5,r2,r16
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    15a4:	29400003 	ldbu	r5,0(r5)
    15a8:	d9401415 	stw	r5,80(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    15ac:	110b883a 	add	r5,r2,r4
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    15b0:	29400003 	ldbu	r5,0(r5)
    15b4:	d9401515 	stw	r5,84(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    15b8:	154b883a 	add	r5,r2,r21
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    15bc:	29400003 	ldbu	r5,0(r5)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    15c0:	1585883a 	add	r2,r2,r22
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    15c4:	d9401615 	stw	r5,88(sp)
    15c8:	10800003 	ldbu	r2,0(r2)
    15cc:	d8801715 	stw	r2,92(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
    15d0:	18800017 	ldw	r2,0(r3)
    15d4:	15cb883a 	add	r5,r2,r23
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    15d8:	29400003 	ldbu	r5,0(r5)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
                image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
    15dc:	1109883a 	add	r4,r2,r4
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    15e0:	d9401815 	stw	r5,96(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
                image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
    15e4:	140b883a 	add	r5,r2,r16
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    15e8:	29400003 	ldbu	r5,0(r5)
    15ec:	d9401915 	stw	r5,100(sp)
    15f0:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
                image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);
    15f4:	01400644 	movi	r5,25
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    15f8:	d9001a15 	stw	r4,104(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
                image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
    15fc:	1549883a 	add	r4,r2,r21
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1600:	21000003 	ldbu	r4,0(r4)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
                image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
    1604:	1585883a 	add	r2,r2,r22
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
            }else{
                int array[] = {image.Rows[j][i], image.Rows[j][i+1], image.Rows[j][i+2], image.Rows[j][i-1], image.Rows[j][i-2], image.Rows[j-1][i], image.Rows[j-1][i+1], 
    1608:	d9001b15 	stw	r4,108(sp)
    160c:	10800003 	ldbu	r2,0(r2)
    1610:	d8801c15 	stw	r2,112(sp)
                image.Rows[j-1][i+2], image.Rows[j-1][i-1], image.Rows[j-1][i-2], image.Rows[j-2][i], image.Rows[j-2][i+1], image.Rows[j-2][i+2], image.Rows[j-2][i-1], 
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
                image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);
    1614:	d9000404 	addi	r4,sp,16
    1618:	00004800 	call	480 <Bubblesort_Number>

                set_pixel(cloned_image, i, j, res);
    161c:	10803fcc 	andi	r2,r2,255
    1620:	d8800315 	stw	r2,12(sp)
    1624:	dc400215 	stw	r17,8(sp)
    1628:	ddc00115 	stw	r23,4(sp)
    162c:	e0800417 	ldw	r2,16(fp)

Image medianFilter5x5 (Image image){
    Image cloned_image = clone(image);
     
    for(int j = 0; j < image.size.height ; j++){
      for(int i = 0; i < image.size.width ; i++){
    1630:	bdc00044 	addi	r23,r23,1
    1634:	84000044 	addi	r16,r16,1
                image.Rows[j-2][i-2], image.Rows[j+1][i] ,image.Rows[j+1][i+1], image.Rows[j+1][i+2], image.Rows[j+1][i-1], image.Rows[j+1][i-2], image.Rows[j+2][i], 
                image.Rows[j+2][i+1], image.Rows[j+2][i+2], image.Rows[j+2][i-1], image.Rows[j+2][i-2]};
                int size = sizeof(array)/sizeof(array[0]);
                int res = Bubblesort_Number(array , size);

                set_pixel(cloned_image, i, j, res);
    1638:	d8800015 	stw	r2,0(sp)
    163c:	e1000017 	ldw	r4,0(fp)
    1640:	e1400117 	ldw	r5,4(fp)
    1644:	e1800217 	ldw	r6,8(fp)
    1648:	e1c00317 	ldw	r7,12(fp)
    164c:	ad400044 	addi	r21,r21,1
    1650:	b5800044 	addi	r22,r22,1
    1654:	000005c0 	call	5c <set_pixel>
    1658:	003be706 	br	5f8 <__alt_data_end+0xf80005f8>
    165c:	d8c01e17 	ldw	r3,120(sp)
}

Image medianFilter5x5 (Image image){
    Image cloned_image = clone(image);
     
    for(int j = 0; j < image.size.height ; j++){
    1660:	8c400044 	addi	r17,r17,1
    1664:	9cc00104 	addi	r19,r19,4
    1668:	18c00104 	addi	r3,r3,4
    166c:	d8c01e15 	stw	r3,120(sp)
    1670:	d8c01f17 	ldw	r3,124(sp)
    1674:	94800104 	addi	r18,r18,4
    1678:	a5000104 	addi	r20,r20,4
    167c:	18c00104 	addi	r3,r3,4
    1680:	d8c01f15 	stw	r3,124(sp)
    1684:	003bd606 	br	5e0 <__alt_data_end+0xf80005e0>
        png_image = Image_to_png(cloned_image);
        write_png_file("cloned_filter.png", png_image);
        */
       return cloned_image;

}
    1688:	e005883a 	mov	r2,fp
    168c:	dfc02f17 	ldw	ra,188(sp)
    1690:	df002e17 	ldw	fp,184(sp)
    1694:	ddc02d17 	ldw	r23,180(sp)
    1698:	dd802c17 	ldw	r22,176(sp)
    169c:	dd402b17 	ldw	r21,172(sp)
    16a0:	dd002a17 	ldw	r20,168(sp)
    16a4:	dcc02917 	ldw	r19,164(sp)
    16a8:	dc802817 	ldw	r18,160(sp)
    16ac:	dc402717 	ldw	r17,156(sp)
    16b0:	dc002617 	ldw	r16,152(sp)
    16b4:	dec03304 	addi	sp,sp,204
    16b8:	f800283a 	ret

000016bc <sendToSDRAM>:
#include "nios_comm.h"

void sendToSDRAM(void* sdram , int* leds , int signal, ImageNIOS image){
    16bc:	defffb04 	addi	sp,sp,-20
    16c0:	dc800215 	stw	r18,8(sp)
    16c4:	2825883a 	mov	r18,r5
    16c8:	d9400517 	ldw	r5,20(sp)
    16cc:	dfc00315 	stw	ra,12(sp)
    16d0:	dc400115 	stw	r17,4(sp)
    16d4:	dc000015 	stw	r16,0(sp)
    int * width =  (int * ) sdram;
    int * height =  ((int * ) sdram ) + 1;
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    * width = image.width;
    16d8:	21c00015 	stw	r7,0(r4)
    * height = image.height;
    16dc:	21400115 	stw	r5,4(r4)
    memcpy (pixels, image.pixels, image.width * image.height);
    16e0:	24000204 	addi	r16,r4,8
    16e4:	3809883a 	mov	r4,r7
#include "nios_comm.h"

void sendToSDRAM(void* sdram , int* leds , int signal, ImageNIOS image){
    16e8:	3023883a 	mov	r17,r6
    16ec:	d9c00415 	stw	r7,16(sp)
    int * width =  (int * ) sdram;
    int * height =  ((int * ) sdram ) + 1;
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    * width = image.width;
    * height = image.height;
    memcpy (pixels, image.pixels, image.width * image.height);
    16f0:	00017e80 	call	17e8 <__mulsi3>
    16f4:	d9400617 	ldw	r5,24(sp)
    16f8:	8009883a 	mov	r4,r16
    16fc:	100d883a 	mov	r6,r2
    1700:	00018380 	call	1838 <memcpy>
    *leds = signal;
    printf("%X\n",*leds);
    1704:	01010034 	movhi	r4,1024
    1708:	880b883a 	mov	r5,r17
    170c:	21000e04 	addi	r4,r4,56
    int * height =  ((int * ) sdram ) + 1;
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    * width = image.width;
    * height = image.height;
    memcpy (pixels, image.pixels, image.width * image.height);
    *leds = signal;
    1710:	94400015 	stw	r17,0(r18)
    printf("%X\n",*leds);
}
    1714:	dfc00317 	ldw	ra,12(sp)
    1718:	dc800217 	ldw	r18,8(sp)
    171c:	dc400117 	ldw	r17,4(sp)
    1720:	dc000017 	ldw	r16,0(sp)
    1724:	dec00504 	addi	sp,sp,20
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    * width = image.width;
    * height = image.height;
    memcpy (pixels, image.pixels, image.width * image.height);
    *leds = signal;
    printf("%X\n",*leds);
    1728:	0001ad81 	jmpi	1ad8 <printf>

0000172c <receiveFromSDRAM>:
}

ImageNIOS receiveFromSDRAM(void* sdram, int* leds, int signal){
    172c:	defff804 	addi	sp,sp,-32
    1730:	dc000015 	stw	r16,0(sp)
    1734:	2821883a 	mov	r16,r5
    1738:	dc400115 	stw	r17,4(sp)
    int * width =  (int * ) sdram;
    int * height =  ((int * ) sdram ) + 1;
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    PixelNIOS * pixels_res = malloc(sizeof(PixelNIOS) * *width * *height);
    173c:	29400117 	ldw	r5,4(r5)
    memcpy (pixels, image.pixels, image.width * image.height);
    *leds = signal;
    printf("%X\n",*leds);
}

ImageNIOS receiveFromSDRAM(void* sdram, int* leds, int signal){
    1740:	2023883a 	mov	r17,r4
    int * width =  (int * ) sdram;
    int * height =  ((int * ) sdram ) + 1;
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    PixelNIOS * pixels_res = malloc(sizeof(PixelNIOS) * *width * *height);
    1744:	81000017 	ldw	r4,0(r16)
    memcpy (pixels, image.pixels, image.width * image.height);
    *leds = signal;
    printf("%X\n",*leds);
}

ImageNIOS receiveFromSDRAM(void* sdram, int* leds, int signal){
    1748:	dfc00715 	stw	ra,28(sp)
    174c:	dd800615 	stw	r22,24(sp)
    1750:	dd400515 	stw	r21,20(sp)
    1754:	302d883a 	mov	r22,r6
    1758:	382b883a 	mov	r21,r7
    175c:	dd000415 	stw	r20,16(sp)
    1760:	dcc00315 	stw	r19,12(sp)
    1764:	dc800215 	stw	r18,8(sp)
    int * width =  (int * ) sdram;
    int * height =  ((int * ) sdram ) + 1;
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    PixelNIOS * pixels_res = malloc(sizeof(PixelNIOS) * *width * *height);
    1768:	00017e80 	call	17e8 <__mulsi3>
    176c:	1009883a 	mov	r4,r2
    1770:	00018100 	call	1810 <malloc>
    memcpy (pixels_res, pixels, *width * *height);
    1774:	85000017 	ldw	r20,0(r16)
    1778:	84c00117 	ldw	r19,4(r16)

ImageNIOS receiveFromSDRAM(void* sdram, int* leds, int signal){
    int * width =  (int * ) sdram;
    int * height =  ((int * ) sdram ) + 1;
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    PixelNIOS * pixels_res = malloc(sizeof(PixelNIOS) * *width * *height);
    177c:	1025883a 	mov	r18,r2
    memcpy (pixels_res, pixels, *width * *height);
    1780:	a009883a 	mov	r4,r20
    1784:	980b883a 	mov	r5,r19
    1788:	00017e80 	call	17e8 <__mulsi3>
    178c:	100d883a 	mov	r6,r2
    1790:	81400204 	addi	r5,r16,8
    1794:	9009883a 	mov	r4,r18
    1798:	00018380 	call	1838 <memcpy>

    ImageNIOS result = {*width, * height, pixels_res};
    *leds = signal;
    printf("%X\n",*leds);
    179c:	01010034 	movhi	r4,1024
    char * pixels = (char *)  (((int * ) sdram ) + 2 );
    PixelNIOS * pixels_res = malloc(sizeof(PixelNIOS) * *width * *height);
    memcpy (pixels_res, pixels, *width * *height);

    ImageNIOS result = {*width, * height, pixels_res};
    *leds = signal;
    17a0:	b5400015 	stw	r21,0(r22)
    printf("%X\n",*leds);
    17a4:	a80b883a 	mov	r5,r21
    17a8:	21000e04 	addi	r4,r4,56
    17ac:	0001ad80 	call	1ad8 <printf>
    return result;

    17b0:	8805883a 	mov	r2,r17
    memcpy (pixels_res, pixels, *width * *height);

    ImageNIOS result = {*width, * height, pixels_res};
    *leds = signal;
    printf("%X\n",*leds);
    return result;
    17b4:	8d000015 	stw	r20,0(r17)
    17b8:	8cc00115 	stw	r19,4(r17)
    17bc:	8c800215 	stw	r18,8(r17)

    17c0:	dfc00717 	ldw	ra,28(sp)
    17c4:	dd800617 	ldw	r22,24(sp)
    17c8:	dd400517 	ldw	r21,20(sp)
    17cc:	dd000417 	ldw	r20,16(sp)
    17d0:	dcc00317 	ldw	r19,12(sp)
    17d4:	dc800217 	ldw	r18,8(sp)
    17d8:	dc400117 	ldw	r17,4(sp)
    17dc:	dc000017 	ldw	r16,0(sp)
    17e0:	dec00804 	addi	sp,sp,32
    17e4:	f800283a 	ret

000017e8 <__mulsi3>:
    17e8:	0005883a 	mov	r2,zero
    17ec:	20000726 	beq	r4,zero,180c <__mulsi3+0x24>
    17f0:	20c0004c 	andi	r3,r4,1
    17f4:	2008d07a 	srli	r4,r4,1
    17f8:	18000126 	beq	r3,zero,1800 <__mulsi3+0x18>
    17fc:	1145883a 	add	r2,r2,r5
    1800:	294b883a 	add	r5,r5,r5
    1804:	203ffa1e 	bne	r4,zero,17f0 <__alt_data_end+0xf80017f0>
    1808:	f800283a 	ret
    180c:	f800283a 	ret

00001810 <malloc>:
    1810:	00810034 	movhi	r2,1024
    1814:	10806e04 	addi	r2,r2,440
    1818:	200b883a 	mov	r5,r4
    181c:	11000017 	ldw	r4,0(r2)
    1820:	00019441 	jmpi	1944 <_malloc_r>

00001824 <free>:
    1824:	00810034 	movhi	r2,1024
    1828:	10806e04 	addi	r2,r2,440
    182c:	200b883a 	mov	r5,r4
    1830:	11000017 	ldw	r4,0(r2)
    1834:	00018601 	jmpi	1860 <_free_r>

00001838 <memcpy>:
    1838:	2005883a 	mov	r2,r4
    183c:	2007883a 	mov	r3,r4
    1840:	218d883a 	add	r6,r4,r6
    1844:	19800526 	beq	r3,r6,185c <memcpy+0x24>
    1848:	29000003 	ldbu	r4,0(r5)
    184c:	18c00044 	addi	r3,r3,1
    1850:	29400044 	addi	r5,r5,1
    1854:	193fffc5 	stb	r4,-1(r3)
    1858:	003ffa06 	br	1844 <__alt_data_end+0xf8001844>
    185c:	f800283a 	ret

00001860 <_free_r>:
    1860:	28003726 	beq	r5,zero,1940 <_free_r+0xe0>
    1864:	28ffff17 	ldw	r3,-4(r5)
    1868:	28bfff04 	addi	r2,r5,-4
    186c:	1800010e 	bge	r3,zero,1874 <_free_r+0x14>
    1870:	10c5883a 	add	r2,r2,r3
    1874:	01410034 	movhi	r5,1024
    1878:	29407304 	addi	r5,r5,460
    187c:	28c00017 	ldw	r3,0(r5)
    1880:	280d883a 	mov	r6,r5
    1884:	1800031e 	bne	r3,zero,1894 <_free_r+0x34>
    1888:	10000115 	stw	zero,4(r2)
    188c:	28800015 	stw	r2,0(r5)
    1890:	f800283a 	ret
    1894:	10c00c2e 	bgeu	r2,r3,18c8 <_free_r+0x68>
    1898:	11000017 	ldw	r4,0(r2)
    189c:	110b883a 	add	r5,r2,r4
    18a0:	1940041e 	bne	r3,r5,18b4 <_free_r+0x54>
    18a4:	19400017 	ldw	r5,0(r3)
    18a8:	18c00117 	ldw	r3,4(r3)
    18ac:	2909883a 	add	r4,r5,r4
    18b0:	11000015 	stw	r4,0(r2)
    18b4:	10c00115 	stw	r3,4(r2)
    18b8:	30800015 	stw	r2,0(r6)
    18bc:	f800283a 	ret
    18c0:	11400336 	bltu	r2,r5,18d0 <_free_r+0x70>
    18c4:	2807883a 	mov	r3,r5
    18c8:	19400117 	ldw	r5,4(r3)
    18cc:	283ffc1e 	bne	r5,zero,18c0 <__alt_data_end+0xf80018c0>
    18d0:	19c00017 	ldw	r7,0(r3)
    18d4:	19cd883a 	add	r6,r3,r7
    18d8:	30800a1e 	bne	r6,r2,1904 <_free_r+0xa4>
    18dc:	10800017 	ldw	r2,0(r2)
    18e0:	3885883a 	add	r2,r7,r2
    18e4:	18800015 	stw	r2,0(r3)
    18e8:	1889883a 	add	r4,r3,r2
    18ec:	2900141e 	bne	r5,r4,1940 <_free_r+0xe0>
    18f0:	29000017 	ldw	r4,0(r5)
    18f4:	2085883a 	add	r2,r4,r2
    18f8:	18800015 	stw	r2,0(r3)
    18fc:	28800117 	ldw	r2,4(r5)
    1900:	00000e06 	br	193c <_free_r+0xdc>
    1904:	1180032e 	bgeu	r2,r6,1914 <_free_r+0xb4>
    1908:	00800304 	movi	r2,12
    190c:	20800015 	stw	r2,0(r4)
    1910:	f800283a 	ret
    1914:	11000017 	ldw	r4,0(r2)
    1918:	110d883a 	add	r6,r2,r4
    191c:	2980061e 	bne	r5,r6,1938 <_free_r+0xd8>
    1920:	29800017 	ldw	r6,0(r5)
    1924:	3109883a 	add	r4,r6,r4
    1928:	11000015 	stw	r4,0(r2)
    192c:	29000117 	ldw	r4,4(r5)
    1930:	11000115 	stw	r4,4(r2)
    1934:	00000106 	br	193c <_free_r+0xdc>
    1938:	11400115 	stw	r5,4(r2)
    193c:	18800115 	stw	r2,4(r3)
    1940:	f800283a 	ret

00001944 <_malloc_r>:
    1944:	defffb04 	addi	sp,sp,-20
    1948:	00bfff04 	movi	r2,-4
    194c:	dc400115 	stw	r17,4(sp)
    1950:	2c4000c4 	addi	r17,r5,3
    1954:	88a2703a 	and	r17,r17,r2
    1958:	dc800215 	stw	r18,8(sp)
    195c:	dfc00415 	stw	ra,16(sp)
    1960:	dcc00315 	stw	r19,12(sp)
    1964:	dc000015 	stw	r16,0(sp)
    1968:	8c400204 	addi	r17,r17,8
    196c:	00800304 	movi	r2,12
    1970:	2025883a 	mov	r18,r4
    1974:	8880022e 	bgeu	r17,r2,1980 <_malloc_r+0x3c>
    1978:	1023883a 	mov	r17,r2
    197c:	00000506 	br	1994 <_malloc_r+0x50>
    1980:	8800040e 	bge	r17,zero,1994 <_malloc_r+0x50>
    1984:	00800304 	movi	r2,12
    1988:	90800015 	stw	r2,0(r18)
    198c:	0005883a 	mov	r2,zero
    1990:	00003b06 	br	1a80 <_malloc_r+0x13c>
    1994:	897ffb36 	bltu	r17,r5,1984 <__alt_data_end+0xf8001984>
    1998:	00810034 	movhi	r2,1024
    199c:	10807304 	addi	r2,r2,460
    19a0:	10c00017 	ldw	r3,0(r2)
    19a4:	1009883a 	mov	r4,r2
    19a8:	1821883a 	mov	r16,r3
    19ac:	80000926 	beq	r16,zero,19d4 <_malloc_r+0x90>
    19b0:	80800017 	ldw	r2,0(r16)
    19b4:	1445c83a 	sub	r2,r2,r17
    19b8:	10001516 	blt	r2,zero,1a10 <_malloc_r+0xcc>
    19bc:	014002c4 	movi	r5,11
    19c0:	28800d2e 	bgeu	r5,r2,19f8 <_malloc_r+0xb4>
    19c4:	80800015 	stw	r2,0(r16)
    19c8:	80a1883a 	add	r16,r16,r2
    19cc:	84400015 	stw	r17,0(r16)
    19d0:	8000221e 	bne	r16,zero,1a5c <_malloc_r+0x118>
    19d4:	04010034 	movhi	r16,1024
    19d8:	84007204 	addi	r16,r16,456
    19dc:	80800017 	ldw	r2,0(r16)
    19e0:	10000e1e 	bne	r2,zero,1a1c <_malloc_r+0xd8>
    19e4:	000b883a 	mov	r5,zero
    19e8:	9009883a 	mov	r4,r18
    19ec:	0001bb80 	call	1bb8 <_sbrk_r>
    19f0:	80800015 	stw	r2,0(r16)
    19f4:	00000906 	br	1a1c <_malloc_r+0xd8>
    19f8:	80800117 	ldw	r2,4(r16)
    19fc:	1c00021e 	bne	r3,r16,1a08 <_malloc_r+0xc4>
    1a00:	20800015 	stw	r2,0(r4)
    1a04:	00001506 	br	1a5c <_malloc_r+0x118>
    1a08:	18800115 	stw	r2,4(r3)
    1a0c:	00001306 	br	1a5c <_malloc_r+0x118>
    1a10:	8007883a 	mov	r3,r16
    1a14:	84000117 	ldw	r16,4(r16)
    1a18:	003fe406 	br	19ac <__alt_data_end+0xf80019ac>
    1a1c:	880b883a 	mov	r5,r17
    1a20:	9009883a 	mov	r4,r18
    1a24:	0001bb80 	call	1bb8 <_sbrk_r>
    1a28:	04ffffc4 	movi	r19,-1
    1a2c:	14ffd526 	beq	r2,r19,1984 <__alt_data_end+0xf8001984>
    1a30:	140000c4 	addi	r16,r2,3
    1a34:	00ffff04 	movi	r3,-4
    1a38:	80e0703a 	and	r16,r16,r3
    1a3c:	1400021e 	bne	r2,r16,1a48 <_malloc_r+0x104>
    1a40:	84400015 	stw	r17,0(r16)
    1a44:	00000506 	br	1a5c <_malloc_r+0x118>
    1a48:	808bc83a 	sub	r5,r16,r2
    1a4c:	9009883a 	mov	r4,r18
    1a50:	0001bb80 	call	1bb8 <_sbrk_r>
    1a54:	14fffa1e 	bne	r2,r19,1a40 <__alt_data_end+0xf8001a40>
    1a58:	003fca06 	br	1984 <__alt_data_end+0xf8001984>
    1a5c:	810002c4 	addi	r4,r16,11
    1a60:	00bffe04 	movi	r2,-8
    1a64:	80c00104 	addi	r3,r16,4
    1a68:	2084703a 	and	r2,r4,r2
    1a6c:	10c7c83a 	sub	r3,r2,r3
    1a70:	18000326 	beq	r3,zero,1a80 <_malloc_r+0x13c>
    1a74:	80e1883a 	add	r16,r16,r3
    1a78:	00c7c83a 	sub	r3,zero,r3
    1a7c:	80c00015 	stw	r3,0(r16)
    1a80:	dfc00417 	ldw	ra,16(sp)
    1a84:	dcc00317 	ldw	r19,12(sp)
    1a88:	dc800217 	ldw	r18,8(sp)
    1a8c:	dc400117 	ldw	r17,4(sp)
    1a90:	dc000017 	ldw	r16,0(sp)
    1a94:	dec00504 	addi	sp,sp,20
    1a98:	f800283a 	ret

00001a9c <_printf_r>:
    1a9c:	defffd04 	addi	sp,sp,-12
    1aa0:	dfc00015 	stw	ra,0(sp)
    1aa4:	d9800115 	stw	r6,4(sp)
    1aa8:	d9c00215 	stw	r7,8(sp)
    1aac:	20c00217 	ldw	r3,8(r4)
    1ab0:	01800034 	movhi	r6,0
    1ab4:	31887604 	addi	r6,r6,8664
    1ab8:	19800115 	stw	r6,4(r3)
    1abc:	280d883a 	mov	r6,r5
    1ac0:	21400217 	ldw	r5,8(r4)
    1ac4:	d9c00104 	addi	r7,sp,4
    1ac8:	0001c900 	call	1c90 <___vfprintf_internal_r>
    1acc:	dfc00017 	ldw	ra,0(sp)
    1ad0:	dec00304 	addi	sp,sp,12
    1ad4:	f800283a 	ret

00001ad8 <printf>:
    1ad8:	defffc04 	addi	sp,sp,-16
    1adc:	dfc00015 	stw	ra,0(sp)
    1ae0:	d9400115 	stw	r5,4(sp)
    1ae4:	d9800215 	stw	r6,8(sp)
    1ae8:	d9c00315 	stw	r7,12(sp)
    1aec:	00810034 	movhi	r2,1024
    1af0:	10806e04 	addi	r2,r2,440
    1af4:	10800017 	ldw	r2,0(r2)
    1af8:	01400034 	movhi	r5,0
    1afc:	29487604 	addi	r5,r5,8664
    1b00:	10c00217 	ldw	r3,8(r2)
    1b04:	d9800104 	addi	r6,sp,4
    1b08:	19400115 	stw	r5,4(r3)
    1b0c:	200b883a 	mov	r5,r4
    1b10:	11000217 	ldw	r4,8(r2)
    1b14:	00021bc0 	call	21bc <__vfprintf_internal>
    1b18:	dfc00017 	ldw	ra,0(sp)
    1b1c:	dec00404 	addi	sp,sp,16
    1b20:	f800283a 	ret

00001b24 <_puts_r>:
    1b24:	defffd04 	addi	sp,sp,-12
    1b28:	dc000015 	stw	r16,0(sp)
    1b2c:	2021883a 	mov	r16,r4
    1b30:	2809883a 	mov	r4,r5
    1b34:	dfc00215 	stw	ra,8(sp)
    1b38:	dc400115 	stw	r17,4(sp)
    1b3c:	2823883a 	mov	r17,r5
    1b40:	0001c080 	call	1c08 <strlen>
    1b44:	81400217 	ldw	r5,8(r16)
    1b48:	01000034 	movhi	r4,0
    1b4c:	21087604 	addi	r4,r4,8664
    1b50:	29000115 	stw	r4,4(r5)
    1b54:	100f883a 	mov	r7,r2
    1b58:	880d883a 	mov	r6,r17
    1b5c:	8009883a 	mov	r4,r16
    1b60:	00021d80 	call	21d8 <__sfvwrite_small_dev>
    1b64:	00ffffc4 	movi	r3,-1
    1b68:	10c00926 	beq	r2,r3,1b90 <_puts_r+0x6c>
    1b6c:	81400217 	ldw	r5,8(r16)
    1b70:	01810034 	movhi	r6,1024
    1b74:	01c00044 	movi	r7,1
    1b78:	28800117 	ldw	r2,4(r5)
    1b7c:	31803204 	addi	r6,r6,200
    1b80:	8009883a 	mov	r4,r16
    1b84:	103ee83a 	callr	r2
    1b88:	10bfffe0 	cmpeqi	r2,r2,-1
    1b8c:	0085c83a 	sub	r2,zero,r2
    1b90:	dfc00217 	ldw	ra,8(sp)
    1b94:	dc400117 	ldw	r17,4(sp)
    1b98:	dc000017 	ldw	r16,0(sp)
    1b9c:	dec00304 	addi	sp,sp,12
    1ba0:	f800283a 	ret

00001ba4 <puts>:
    1ba4:	00810034 	movhi	r2,1024
    1ba8:	10806e04 	addi	r2,r2,440
    1bac:	200b883a 	mov	r5,r4
    1bb0:	11000017 	ldw	r4,0(r2)
    1bb4:	0001b241 	jmpi	1b24 <_puts_r>

00001bb8 <_sbrk_r>:
    1bb8:	defffd04 	addi	sp,sp,-12
    1bbc:	dc000015 	stw	r16,0(sp)
    1bc0:	04010034 	movhi	r16,1024
    1bc4:	dc400115 	stw	r17,4(sp)
    1bc8:	84007404 	addi	r16,r16,464
    1bcc:	2023883a 	mov	r17,r4
    1bd0:	2809883a 	mov	r4,r5
    1bd4:	dfc00215 	stw	ra,8(sp)
    1bd8:	80000015 	stw	zero,0(r16)
    1bdc:	00025e00 	call	25e0 <sbrk>
    1be0:	00ffffc4 	movi	r3,-1
    1be4:	10c0031e 	bne	r2,r3,1bf4 <_sbrk_r+0x3c>
    1be8:	80c00017 	ldw	r3,0(r16)
    1bec:	18000126 	beq	r3,zero,1bf4 <_sbrk_r+0x3c>
    1bf0:	88c00015 	stw	r3,0(r17)
    1bf4:	dfc00217 	ldw	ra,8(sp)
    1bf8:	dc400117 	ldw	r17,4(sp)
    1bfc:	dc000017 	ldw	r16,0(sp)
    1c00:	dec00304 	addi	sp,sp,12
    1c04:	f800283a 	ret

00001c08 <strlen>:
    1c08:	2005883a 	mov	r2,r4
    1c0c:	10c00007 	ldb	r3,0(r2)
    1c10:	18000226 	beq	r3,zero,1c1c <strlen+0x14>
    1c14:	10800044 	addi	r2,r2,1
    1c18:	003ffc06 	br	1c0c <__alt_data_end+0xf8001c0c>
    1c1c:	1105c83a 	sub	r2,r2,r4
    1c20:	f800283a 	ret

00001c24 <print_repeat>:
    1c24:	defffb04 	addi	sp,sp,-20
    1c28:	dc800315 	stw	r18,12(sp)
    1c2c:	dc400215 	stw	r17,8(sp)
    1c30:	dc000115 	stw	r16,4(sp)
    1c34:	dfc00415 	stw	ra,16(sp)
    1c38:	2025883a 	mov	r18,r4
    1c3c:	2823883a 	mov	r17,r5
    1c40:	d9800005 	stb	r6,0(sp)
    1c44:	3821883a 	mov	r16,r7
    1c48:	04000a0e 	bge	zero,r16,1c74 <print_repeat+0x50>
    1c4c:	88800117 	ldw	r2,4(r17)
    1c50:	01c00044 	movi	r7,1
    1c54:	d80d883a 	mov	r6,sp
    1c58:	880b883a 	mov	r5,r17
    1c5c:	9009883a 	mov	r4,r18
    1c60:	103ee83a 	callr	r2
    1c64:	843fffc4 	addi	r16,r16,-1
    1c68:	103ff726 	beq	r2,zero,1c48 <__alt_data_end+0xf8001c48>
    1c6c:	00bfffc4 	movi	r2,-1
    1c70:	00000106 	br	1c78 <print_repeat+0x54>
    1c74:	0005883a 	mov	r2,zero
    1c78:	dfc00417 	ldw	ra,16(sp)
    1c7c:	dc800317 	ldw	r18,12(sp)
    1c80:	dc400217 	ldw	r17,8(sp)
    1c84:	dc000117 	ldw	r16,4(sp)
    1c88:	dec00504 	addi	sp,sp,20
    1c8c:	f800283a 	ret

00001c90 <___vfprintf_internal_r>:
    1c90:	deffe504 	addi	sp,sp,-108
    1c94:	d8c00804 	addi	r3,sp,32
    1c98:	ddc01815 	stw	r23,96(sp)
    1c9c:	dd801715 	stw	r22,92(sp)
    1ca0:	dd401615 	stw	r21,88(sp)
    1ca4:	dd001515 	stw	r20,84(sp)
    1ca8:	dcc01415 	stw	r19,80(sp)
    1cac:	dc801315 	stw	r18,76(sp)
    1cb0:	dc401215 	stw	r17,72(sp)
    1cb4:	dc001115 	stw	r16,68(sp)
    1cb8:	dfc01a15 	stw	ra,104(sp)
    1cbc:	df001915 	stw	fp,100(sp)
    1cc0:	2029883a 	mov	r20,r4
    1cc4:	2823883a 	mov	r17,r5
    1cc8:	382d883a 	mov	r22,r7
    1ccc:	d9800f15 	stw	r6,60(sp)
    1cd0:	0021883a 	mov	r16,zero
    1cd4:	d8000e15 	stw	zero,56(sp)
    1cd8:	d8000a15 	stw	zero,40(sp)
    1cdc:	002b883a 	mov	r21,zero
    1ce0:	0027883a 	mov	r19,zero
    1ce4:	0025883a 	mov	r18,zero
    1ce8:	d8000c15 	stw	zero,48(sp)
    1cec:	d8000b15 	stw	zero,44(sp)
    1cf0:	002f883a 	mov	r23,zero
    1cf4:	d8c00915 	stw	r3,36(sp)
    1cf8:	d8c00f17 	ldw	r3,60(sp)
    1cfc:	19000003 	ldbu	r4,0(r3)
    1d00:	20803fcc 	andi	r2,r4,255
    1d04:	1080201c 	xori	r2,r2,128
    1d08:	10bfe004 	addi	r2,r2,-128
    1d0c:	10011e26 	beq	r2,zero,2188 <___vfprintf_internal_r+0x4f8>
    1d10:	00c00044 	movi	r3,1
    1d14:	b8c01426 	beq	r23,r3,1d68 <___vfprintf_internal_r+0xd8>
    1d18:	1dc00216 	blt	r3,r23,1d24 <___vfprintf_internal_r+0x94>
    1d1c:	b8000626 	beq	r23,zero,1d38 <___vfprintf_internal_r+0xa8>
    1d20:	00011506 	br	2178 <___vfprintf_internal_r+0x4e8>
    1d24:	01400084 	movi	r5,2
    1d28:	b9401d26 	beq	r23,r5,1da0 <___vfprintf_internal_r+0x110>
    1d2c:	014000c4 	movi	r5,3
    1d30:	b9402b26 	beq	r23,r5,1de0 <___vfprintf_internal_r+0x150>
    1d34:	00011006 	br	2178 <___vfprintf_internal_r+0x4e8>
    1d38:	01400944 	movi	r5,37
    1d3c:	1140fc26 	beq	r2,r5,2130 <___vfprintf_internal_r+0x4a0>
    1d40:	88800117 	ldw	r2,4(r17)
    1d44:	d9000005 	stb	r4,0(sp)
    1d48:	01c00044 	movi	r7,1
    1d4c:	d80d883a 	mov	r6,sp
    1d50:	880b883a 	mov	r5,r17
    1d54:	a009883a 	mov	r4,r20
    1d58:	103ee83a 	callr	r2
    1d5c:	1000d81e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    1d60:	84000044 	addi	r16,r16,1
    1d64:	00010406 	br	2178 <___vfprintf_internal_r+0x4e8>
    1d68:	01400c04 	movi	r5,48
    1d6c:	1140fa26 	beq	r2,r5,2158 <___vfprintf_internal_r+0x4c8>
    1d70:	01400944 	movi	r5,37
    1d74:	11400a1e 	bne	r2,r5,1da0 <___vfprintf_internal_r+0x110>
    1d78:	d8800005 	stb	r2,0(sp)
    1d7c:	88800117 	ldw	r2,4(r17)
    1d80:	b80f883a 	mov	r7,r23
    1d84:	d80d883a 	mov	r6,sp
    1d88:	880b883a 	mov	r5,r17
    1d8c:	a009883a 	mov	r4,r20
    1d90:	103ee83a 	callr	r2
    1d94:	1000ca1e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    1d98:	84000044 	addi	r16,r16,1
    1d9c:	0000f506 	br	2174 <___vfprintf_internal_r+0x4e4>
    1da0:	25fff404 	addi	r23,r4,-48
    1da4:	bdc03fcc 	andi	r23,r23,255
    1da8:	00c00244 	movi	r3,9
    1dac:	1dc00936 	bltu	r3,r23,1dd4 <___vfprintf_internal_r+0x144>
    1db0:	00bfffc4 	movi	r2,-1
    1db4:	90800426 	beq	r18,r2,1dc8 <___vfprintf_internal_r+0x138>
    1db8:	01400284 	movi	r5,10
    1dbc:	9009883a 	mov	r4,r18
    1dc0:	00017e80 	call	17e8 <__mulsi3>
    1dc4:	00000106 	br	1dcc <___vfprintf_internal_r+0x13c>
    1dc8:	0005883a 	mov	r2,zero
    1dcc:	b8a5883a 	add	r18,r23,r2
    1dd0:	0000e206 	br	215c <___vfprintf_internal_r+0x4cc>
    1dd4:	01400b84 	movi	r5,46
    1dd8:	1140e426 	beq	r2,r5,216c <___vfprintf_internal_r+0x4dc>
    1ddc:	05c00084 	movi	r23,2
    1de0:	213ff404 	addi	r4,r4,-48
    1de4:	27003fcc 	andi	fp,r4,255
    1de8:	00c00244 	movi	r3,9
    1dec:	1f000936 	bltu	r3,fp,1e14 <___vfprintf_internal_r+0x184>
    1df0:	00bfffc4 	movi	r2,-1
    1df4:	98800426 	beq	r19,r2,1e08 <___vfprintf_internal_r+0x178>
    1df8:	01400284 	movi	r5,10
    1dfc:	9809883a 	mov	r4,r19
    1e00:	00017e80 	call	17e8 <__mulsi3>
    1e04:	00000106 	br	1e0c <___vfprintf_internal_r+0x17c>
    1e08:	0005883a 	mov	r2,zero
    1e0c:	e0a7883a 	add	r19,fp,r2
    1e10:	0000d906 	br	2178 <___vfprintf_internal_r+0x4e8>
    1e14:	00c01b04 	movi	r3,108
    1e18:	10c0d226 	beq	r2,r3,2164 <___vfprintf_internal_r+0x4d4>
    1e1c:	013fffc4 	movi	r4,-1
    1e20:	99000226 	beq	r19,r4,1e2c <___vfprintf_internal_r+0x19c>
    1e24:	d8000b15 	stw	zero,44(sp)
    1e28:	00000106 	br	1e30 <___vfprintf_internal_r+0x1a0>
    1e2c:	04c00044 	movi	r19,1
    1e30:	01001a44 	movi	r4,105
    1e34:	11001626 	beq	r2,r4,1e90 <___vfprintf_internal_r+0x200>
    1e38:	20800916 	blt	r4,r2,1e60 <___vfprintf_internal_r+0x1d0>
    1e3c:	010018c4 	movi	r4,99
    1e40:	11008826 	beq	r2,r4,2064 <___vfprintf_internal_r+0x3d4>
    1e44:	01001904 	movi	r4,100
    1e48:	11001126 	beq	r2,r4,1e90 <___vfprintf_internal_r+0x200>
    1e4c:	01001604 	movi	r4,88
    1e50:	1100c81e 	bne	r2,r4,2174 <___vfprintf_internal_r+0x4e4>
    1e54:	00c00044 	movi	r3,1
    1e58:	d8c00e15 	stw	r3,56(sp)
    1e5c:	00001506 	br	1eb4 <___vfprintf_internal_r+0x224>
    1e60:	01001cc4 	movi	r4,115
    1e64:	11009826 	beq	r2,r4,20c8 <___vfprintf_internal_r+0x438>
    1e68:	20800416 	blt	r4,r2,1e7c <___vfprintf_internal_r+0x1ec>
    1e6c:	01001bc4 	movi	r4,111
    1e70:	1100c01e 	bne	r2,r4,2174 <___vfprintf_internal_r+0x4e4>
    1e74:	05400204 	movi	r21,8
    1e78:	00000f06 	br	1eb8 <___vfprintf_internal_r+0x228>
    1e7c:	01001d44 	movi	r4,117
    1e80:	11000d26 	beq	r2,r4,1eb8 <___vfprintf_internal_r+0x228>
    1e84:	01001e04 	movi	r4,120
    1e88:	11000a26 	beq	r2,r4,1eb4 <___vfprintf_internal_r+0x224>
    1e8c:	0000b906 	br	2174 <___vfprintf_internal_r+0x4e4>
    1e90:	d8c00a17 	ldw	r3,40(sp)
    1e94:	b7000104 	addi	fp,r22,4
    1e98:	18000726 	beq	r3,zero,1eb8 <___vfprintf_internal_r+0x228>
    1e9c:	df000d15 	stw	fp,52(sp)
    1ea0:	b5c00017 	ldw	r23,0(r22)
    1ea4:	b800080e 	bge	r23,zero,1ec8 <___vfprintf_internal_r+0x238>
    1ea8:	05efc83a 	sub	r23,zero,r23
    1eac:	02400044 	movi	r9,1
    1eb0:	00000606 	br	1ecc <___vfprintf_internal_r+0x23c>
    1eb4:	05400404 	movi	r21,16
    1eb8:	b0c00104 	addi	r3,r22,4
    1ebc:	d8c00d15 	stw	r3,52(sp)
    1ec0:	b5c00017 	ldw	r23,0(r22)
    1ec4:	d8000a15 	stw	zero,40(sp)
    1ec8:	0013883a 	mov	r9,zero
    1ecc:	d839883a 	mov	fp,sp
    1ed0:	b8001726 	beq	r23,zero,1f30 <___vfprintf_internal_r+0x2a0>
    1ed4:	a80b883a 	mov	r5,r21
    1ed8:	b809883a 	mov	r4,r23
    1edc:	da401015 	stw	r9,64(sp)
    1ee0:	00023e00 	call	23e0 <__udivsi3>
    1ee4:	a80b883a 	mov	r5,r21
    1ee8:	1009883a 	mov	r4,r2
    1eec:	102d883a 	mov	r22,r2
    1ef0:	00017e80 	call	17e8 <__mulsi3>
    1ef4:	b885c83a 	sub	r2,r23,r2
    1ef8:	00c00244 	movi	r3,9
    1efc:	da401017 	ldw	r9,64(sp)
    1f00:	18800216 	blt	r3,r2,1f0c <___vfprintf_internal_r+0x27c>
    1f04:	10800c04 	addi	r2,r2,48
    1f08:	00000506 	br	1f20 <___vfprintf_internal_r+0x290>
    1f0c:	d8c00e17 	ldw	r3,56(sp)
    1f10:	18000226 	beq	r3,zero,1f1c <___vfprintf_internal_r+0x28c>
    1f14:	10800dc4 	addi	r2,r2,55
    1f18:	00000106 	br	1f20 <___vfprintf_internal_r+0x290>
    1f1c:	108015c4 	addi	r2,r2,87
    1f20:	e0800005 	stb	r2,0(fp)
    1f24:	b02f883a 	mov	r23,r22
    1f28:	e7000044 	addi	fp,fp,1
    1f2c:	003fe806 	br	1ed0 <__alt_data_end+0xf8001ed0>
    1f30:	e6efc83a 	sub	r23,fp,sp
    1f34:	9dc5c83a 	sub	r2,r19,r23
    1f38:	0080090e 	bge	zero,r2,1f60 <___vfprintf_internal_r+0x2d0>
    1f3c:	e085883a 	add	r2,fp,r2
    1f40:	01400c04 	movi	r5,48
    1f44:	d8c00917 	ldw	r3,36(sp)
    1f48:	e009883a 	mov	r4,fp
    1f4c:	e0c0032e 	bgeu	fp,r3,1f5c <___vfprintf_internal_r+0x2cc>
    1f50:	e7000044 	addi	fp,fp,1
    1f54:	21400005 	stb	r5,0(r4)
    1f58:	e0bffa1e 	bne	fp,r2,1f44 <__alt_data_end+0xf8001f44>
    1f5c:	e6efc83a 	sub	r23,fp,sp
    1f60:	d8c00b17 	ldw	r3,44(sp)
    1f64:	4dd1883a 	add	r8,r9,r23
    1f68:	922dc83a 	sub	r22,r18,r8
    1f6c:	18001626 	beq	r3,zero,1fc8 <___vfprintf_internal_r+0x338>
    1f70:	48000a26 	beq	r9,zero,1f9c <___vfprintf_internal_r+0x30c>
    1f74:	00800b44 	movi	r2,45
    1f78:	d8800805 	stb	r2,32(sp)
    1f7c:	88800117 	ldw	r2,4(r17)
    1f80:	01c00044 	movi	r7,1
    1f84:	d9800804 	addi	r6,sp,32
    1f88:	880b883a 	mov	r5,r17
    1f8c:	a009883a 	mov	r4,r20
    1f90:	103ee83a 	callr	r2
    1f94:	10004a1e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    1f98:	84000044 	addi	r16,r16,1
    1f9c:	0580070e 	bge	zero,r22,1fbc <___vfprintf_internal_r+0x32c>
    1fa0:	b00f883a 	mov	r7,r22
    1fa4:	01800c04 	movi	r6,48
    1fa8:	880b883a 	mov	r5,r17
    1fac:	a009883a 	mov	r4,r20
    1fb0:	0001c240 	call	1c24 <print_repeat>
    1fb4:	1000421e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    1fb8:	85a1883a 	add	r16,r16,r22
    1fbc:	e02d883a 	mov	r22,fp
    1fc0:	bf2fc83a 	sub	r23,r23,fp
    1fc4:	00002006 	br	2048 <___vfprintf_internal_r+0x3b8>
    1fc8:	0580090e 	bge	zero,r22,1ff0 <___vfprintf_internal_r+0x360>
    1fcc:	b00f883a 	mov	r7,r22
    1fd0:	01800804 	movi	r6,32
    1fd4:	880b883a 	mov	r5,r17
    1fd8:	a009883a 	mov	r4,r20
    1fdc:	da401015 	stw	r9,64(sp)
    1fe0:	0001c240 	call	1c24 <print_repeat>
    1fe4:	da401017 	ldw	r9,64(sp)
    1fe8:	1000351e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    1fec:	85a1883a 	add	r16,r16,r22
    1ff0:	483ff226 	beq	r9,zero,1fbc <__alt_data_end+0xf8001fbc>
    1ff4:	00800b44 	movi	r2,45
    1ff8:	d8800805 	stb	r2,32(sp)
    1ffc:	88800117 	ldw	r2,4(r17)
    2000:	01c00044 	movi	r7,1
    2004:	d9800804 	addi	r6,sp,32
    2008:	880b883a 	mov	r5,r17
    200c:	a009883a 	mov	r4,r20
    2010:	103ee83a 	callr	r2
    2014:	10002a1e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    2018:	84000044 	addi	r16,r16,1
    201c:	003fe706 	br	1fbc <__alt_data_end+0xf8001fbc>
    2020:	b5bfffc4 	addi	r22,r22,-1
    2024:	b0800003 	ldbu	r2,0(r22)
    2028:	01c00044 	movi	r7,1
    202c:	d9800804 	addi	r6,sp,32
    2030:	d8800805 	stb	r2,32(sp)
    2034:	88800117 	ldw	r2,4(r17)
    2038:	880b883a 	mov	r5,r17
    203c:	a009883a 	mov	r4,r20
    2040:	103ee83a 	callr	r2
    2044:	10001e1e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    2048:	8585c83a 	sub	r2,r16,r22
    204c:	b5c9883a 	add	r4,r22,r23
    2050:	e085883a 	add	r2,fp,r2
    2054:	013ff216 	blt	zero,r4,2020 <__alt_data_end+0xf8002020>
    2058:	1021883a 	mov	r16,r2
    205c:	dd800d17 	ldw	r22,52(sp)
    2060:	00004406 	br	2174 <___vfprintf_internal_r+0x4e4>
    2064:	00800044 	movi	r2,1
    2068:	1480080e 	bge	r2,r18,208c <___vfprintf_internal_r+0x3fc>
    206c:	95ffffc4 	addi	r23,r18,-1
    2070:	b80f883a 	mov	r7,r23
    2074:	01800804 	movi	r6,32
    2078:	880b883a 	mov	r5,r17
    207c:	a009883a 	mov	r4,r20
    2080:	0001c240 	call	1c24 <print_repeat>
    2084:	10000e1e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    2088:	85e1883a 	add	r16,r16,r23
    208c:	b0800017 	ldw	r2,0(r22)
    2090:	01c00044 	movi	r7,1
    2094:	d80d883a 	mov	r6,sp
    2098:	d8800005 	stb	r2,0(sp)
    209c:	88800117 	ldw	r2,4(r17)
    20a0:	880b883a 	mov	r5,r17
    20a4:	a009883a 	mov	r4,r20
    20a8:	b5c00104 	addi	r23,r22,4
    20ac:	103ee83a 	callr	r2
    20b0:	1000031e 	bne	r2,zero,20c0 <___vfprintf_internal_r+0x430>
    20b4:	84000044 	addi	r16,r16,1
    20b8:	b82d883a 	mov	r22,r23
    20bc:	00002d06 	br	2174 <___vfprintf_internal_r+0x4e4>
    20c0:	00bfffc4 	movi	r2,-1
    20c4:	00003106 	br	218c <___vfprintf_internal_r+0x4fc>
    20c8:	b5c00017 	ldw	r23,0(r22)
    20cc:	b7000104 	addi	fp,r22,4
    20d0:	b809883a 	mov	r4,r23
    20d4:	0001c080 	call	1c08 <strlen>
    20d8:	9091c83a 	sub	r8,r18,r2
    20dc:	102d883a 	mov	r22,r2
    20e0:	0200090e 	bge	zero,r8,2108 <___vfprintf_internal_r+0x478>
    20e4:	400f883a 	mov	r7,r8
    20e8:	01800804 	movi	r6,32
    20ec:	880b883a 	mov	r5,r17
    20f0:	a009883a 	mov	r4,r20
    20f4:	da001015 	stw	r8,64(sp)
    20f8:	0001c240 	call	1c24 <print_repeat>
    20fc:	da001017 	ldw	r8,64(sp)
    2100:	103fef1e 	bne	r2,zero,20c0 <__alt_data_end+0xf80020c0>
    2104:	8221883a 	add	r16,r16,r8
    2108:	88800117 	ldw	r2,4(r17)
    210c:	b00f883a 	mov	r7,r22
    2110:	b80d883a 	mov	r6,r23
    2114:	880b883a 	mov	r5,r17
    2118:	a009883a 	mov	r4,r20
    211c:	103ee83a 	callr	r2
    2120:	103fe71e 	bne	r2,zero,20c0 <__alt_data_end+0xf80020c0>
    2124:	85a1883a 	add	r16,r16,r22
    2128:	e02d883a 	mov	r22,fp
    212c:	00001106 	br	2174 <___vfprintf_internal_r+0x4e4>
    2130:	00c00044 	movi	r3,1
    2134:	04ffffc4 	movi	r19,-1
    2138:	d8000e15 	stw	zero,56(sp)
    213c:	d8c00a15 	stw	r3,40(sp)
    2140:	05400284 	movi	r21,10
    2144:	9825883a 	mov	r18,r19
    2148:	d8000c15 	stw	zero,48(sp)
    214c:	d8000b15 	stw	zero,44(sp)
    2150:	182f883a 	mov	r23,r3
    2154:	00000806 	br	2178 <___vfprintf_internal_r+0x4e8>
    2158:	ddc00b15 	stw	r23,44(sp)
    215c:	05c00084 	movi	r23,2
    2160:	00000506 	br	2178 <___vfprintf_internal_r+0x4e8>
    2164:	00c00044 	movi	r3,1
    2168:	d8c00c15 	stw	r3,48(sp)
    216c:	05c000c4 	movi	r23,3
    2170:	00000106 	br	2178 <___vfprintf_internal_r+0x4e8>
    2174:	002f883a 	mov	r23,zero
    2178:	d8c00f17 	ldw	r3,60(sp)
    217c:	18c00044 	addi	r3,r3,1
    2180:	d8c00f15 	stw	r3,60(sp)
    2184:	003edc06 	br	1cf8 <__alt_data_end+0xf8001cf8>
    2188:	8005883a 	mov	r2,r16
    218c:	dfc01a17 	ldw	ra,104(sp)
    2190:	df001917 	ldw	fp,100(sp)
    2194:	ddc01817 	ldw	r23,96(sp)
    2198:	dd801717 	ldw	r22,92(sp)
    219c:	dd401617 	ldw	r21,88(sp)
    21a0:	dd001517 	ldw	r20,84(sp)
    21a4:	dcc01417 	ldw	r19,80(sp)
    21a8:	dc801317 	ldw	r18,76(sp)
    21ac:	dc401217 	ldw	r17,72(sp)
    21b0:	dc001117 	ldw	r16,68(sp)
    21b4:	dec01b04 	addi	sp,sp,108
    21b8:	f800283a 	ret

000021bc <__vfprintf_internal>:
    21bc:	00810034 	movhi	r2,1024
    21c0:	10806e04 	addi	r2,r2,440
    21c4:	300f883a 	mov	r7,r6
    21c8:	280d883a 	mov	r6,r5
    21cc:	200b883a 	mov	r5,r4
    21d0:	11000017 	ldw	r4,0(r2)
    21d4:	0001c901 	jmpi	1c90 <___vfprintf_internal_r>

000021d8 <__sfvwrite_small_dev>:
    21d8:	2880000b 	ldhu	r2,0(r5)
    21dc:	1080020c 	andi	r2,r2,8
    21e0:	10002126 	beq	r2,zero,2268 <__sfvwrite_small_dev+0x90>
    21e4:	2880008f 	ldh	r2,2(r5)
    21e8:	defffa04 	addi	sp,sp,-24
    21ec:	dc000015 	stw	r16,0(sp)
    21f0:	dfc00515 	stw	ra,20(sp)
    21f4:	dd000415 	stw	r20,16(sp)
    21f8:	dcc00315 	stw	r19,12(sp)
    21fc:	dc800215 	stw	r18,8(sp)
    2200:	dc400115 	stw	r17,4(sp)
    2204:	2821883a 	mov	r16,r5
    2208:	10001216 	blt	r2,zero,2254 <__sfvwrite_small_dev+0x7c>
    220c:	2027883a 	mov	r19,r4
    2210:	3025883a 	mov	r18,r6
    2214:	3823883a 	mov	r17,r7
    2218:	05010004 	movi	r20,1024
    221c:	04400b0e 	bge	zero,r17,224c <__sfvwrite_small_dev+0x74>
    2220:	880f883a 	mov	r7,r17
    2224:	a440010e 	bge	r20,r17,222c <__sfvwrite_small_dev+0x54>
    2228:	01c10004 	movi	r7,1024
    222c:	8140008f 	ldh	r5,2(r16)
    2230:	900d883a 	mov	r6,r18
    2234:	9809883a 	mov	r4,r19
    2238:	00022900 	call	2290 <_write_r>
    223c:	0080050e 	bge	zero,r2,2254 <__sfvwrite_small_dev+0x7c>
    2240:	88a3c83a 	sub	r17,r17,r2
    2244:	90a5883a 	add	r18,r18,r2
    2248:	003ff406 	br	221c <__alt_data_end+0xf800221c>
    224c:	0005883a 	mov	r2,zero
    2250:	00000706 	br	2270 <__sfvwrite_small_dev+0x98>
    2254:	8080000b 	ldhu	r2,0(r16)
    2258:	10801014 	ori	r2,r2,64
    225c:	8080000d 	sth	r2,0(r16)
    2260:	00bfffc4 	movi	r2,-1
    2264:	00000206 	br	2270 <__sfvwrite_small_dev+0x98>
    2268:	00bfffc4 	movi	r2,-1
    226c:	f800283a 	ret
    2270:	dfc00517 	ldw	ra,20(sp)
    2274:	dd000417 	ldw	r20,16(sp)
    2278:	dcc00317 	ldw	r19,12(sp)
    227c:	dc800217 	ldw	r18,8(sp)
    2280:	dc400117 	ldw	r17,4(sp)
    2284:	dc000017 	ldw	r16,0(sp)
    2288:	dec00604 	addi	sp,sp,24
    228c:	f800283a 	ret

00002290 <_write_r>:
    2290:	defffd04 	addi	sp,sp,-12
    2294:	dc000015 	stw	r16,0(sp)
    2298:	04010034 	movhi	r16,1024
    229c:	dc400115 	stw	r17,4(sp)
    22a0:	84007404 	addi	r16,r16,464
    22a4:	2023883a 	mov	r17,r4
    22a8:	2809883a 	mov	r4,r5
    22ac:	300b883a 	mov	r5,r6
    22b0:	380d883a 	mov	r6,r7
    22b4:	dfc00215 	stw	ra,8(sp)
    22b8:	80000015 	stw	zero,0(r16)
    22bc:	00026300 	call	2630 <write>
    22c0:	00ffffc4 	movi	r3,-1
    22c4:	10c0031e 	bne	r2,r3,22d4 <_write_r+0x44>
    22c8:	80c00017 	ldw	r3,0(r16)
    22cc:	18000126 	beq	r3,zero,22d4 <_write_r+0x44>
    22d0:	88c00015 	stw	r3,0(r17)
    22d4:	dfc00217 	ldw	ra,8(sp)
    22d8:	dc400117 	ldw	r17,4(sp)
    22dc:	dc000017 	ldw	r16,0(sp)
    22e0:	dec00304 	addi	sp,sp,12
    22e4:	f800283a 	ret

000022e8 <__divsi3>:
    22e8:	20001b16 	blt	r4,zero,2358 <__divsi3+0x70>
    22ec:	000f883a 	mov	r7,zero
    22f0:	28001616 	blt	r5,zero,234c <__divsi3+0x64>
    22f4:	200d883a 	mov	r6,r4
    22f8:	29001a2e 	bgeu	r5,r4,2364 <__divsi3+0x7c>
    22fc:	00800804 	movi	r2,32
    2300:	00c00044 	movi	r3,1
    2304:	00000106 	br	230c <__divsi3+0x24>
    2308:	10000d26 	beq	r2,zero,2340 <__divsi3+0x58>
    230c:	294b883a 	add	r5,r5,r5
    2310:	10bfffc4 	addi	r2,r2,-1
    2314:	18c7883a 	add	r3,r3,r3
    2318:	293ffb36 	bltu	r5,r4,2308 <__alt_data_end+0xf8002308>
    231c:	0005883a 	mov	r2,zero
    2320:	18000726 	beq	r3,zero,2340 <__divsi3+0x58>
    2324:	0005883a 	mov	r2,zero
    2328:	31400236 	bltu	r6,r5,2334 <__divsi3+0x4c>
    232c:	314dc83a 	sub	r6,r6,r5
    2330:	10c4b03a 	or	r2,r2,r3
    2334:	1806d07a 	srli	r3,r3,1
    2338:	280ad07a 	srli	r5,r5,1
    233c:	183ffa1e 	bne	r3,zero,2328 <__alt_data_end+0xf8002328>
    2340:	38000126 	beq	r7,zero,2348 <__divsi3+0x60>
    2344:	0085c83a 	sub	r2,zero,r2
    2348:	f800283a 	ret
    234c:	014bc83a 	sub	r5,zero,r5
    2350:	39c0005c 	xori	r7,r7,1
    2354:	003fe706 	br	22f4 <__alt_data_end+0xf80022f4>
    2358:	0109c83a 	sub	r4,zero,r4
    235c:	01c00044 	movi	r7,1
    2360:	003fe306 	br	22f0 <__alt_data_end+0xf80022f0>
    2364:	00c00044 	movi	r3,1
    2368:	003fee06 	br	2324 <__alt_data_end+0xf8002324>

0000236c <__modsi3>:
    236c:	20001716 	blt	r4,zero,23cc <__modsi3+0x60>
    2370:	000f883a 	mov	r7,zero
    2374:	2005883a 	mov	r2,r4
    2378:	28001216 	blt	r5,zero,23c4 <__modsi3+0x58>
    237c:	2900162e 	bgeu	r5,r4,23d8 <__modsi3+0x6c>
    2380:	01800804 	movi	r6,32
    2384:	00c00044 	movi	r3,1
    2388:	00000106 	br	2390 <__modsi3+0x24>
    238c:	30000a26 	beq	r6,zero,23b8 <__modsi3+0x4c>
    2390:	294b883a 	add	r5,r5,r5
    2394:	31bfffc4 	addi	r6,r6,-1
    2398:	18c7883a 	add	r3,r3,r3
    239c:	293ffb36 	bltu	r5,r4,238c <__alt_data_end+0xf800238c>
    23a0:	18000526 	beq	r3,zero,23b8 <__modsi3+0x4c>
    23a4:	1806d07a 	srli	r3,r3,1
    23a8:	11400136 	bltu	r2,r5,23b0 <__modsi3+0x44>
    23ac:	1145c83a 	sub	r2,r2,r5
    23b0:	280ad07a 	srli	r5,r5,1
    23b4:	183ffb1e 	bne	r3,zero,23a4 <__alt_data_end+0xf80023a4>
    23b8:	38000126 	beq	r7,zero,23c0 <__modsi3+0x54>
    23bc:	0085c83a 	sub	r2,zero,r2
    23c0:	f800283a 	ret
    23c4:	014bc83a 	sub	r5,zero,r5
    23c8:	003fec06 	br	237c <__alt_data_end+0xf800237c>
    23cc:	0109c83a 	sub	r4,zero,r4
    23d0:	01c00044 	movi	r7,1
    23d4:	003fe706 	br	2374 <__alt_data_end+0xf8002374>
    23d8:	00c00044 	movi	r3,1
    23dc:	003ff106 	br	23a4 <__alt_data_end+0xf80023a4>

000023e0 <__udivsi3>:
    23e0:	200d883a 	mov	r6,r4
    23e4:	2900152e 	bgeu	r5,r4,243c <__udivsi3+0x5c>
    23e8:	28001416 	blt	r5,zero,243c <__udivsi3+0x5c>
    23ec:	00800804 	movi	r2,32
    23f0:	00c00044 	movi	r3,1
    23f4:	00000206 	br	2400 <__udivsi3+0x20>
    23f8:	10000e26 	beq	r2,zero,2434 <__udivsi3+0x54>
    23fc:	28000516 	blt	r5,zero,2414 <__udivsi3+0x34>
    2400:	294b883a 	add	r5,r5,r5
    2404:	10bfffc4 	addi	r2,r2,-1
    2408:	18c7883a 	add	r3,r3,r3
    240c:	293ffa36 	bltu	r5,r4,23f8 <__alt_data_end+0xf80023f8>
    2410:	18000826 	beq	r3,zero,2434 <__udivsi3+0x54>
    2414:	0005883a 	mov	r2,zero
    2418:	31400236 	bltu	r6,r5,2424 <__udivsi3+0x44>
    241c:	314dc83a 	sub	r6,r6,r5
    2420:	10c4b03a 	or	r2,r2,r3
    2424:	1806d07a 	srli	r3,r3,1
    2428:	280ad07a 	srli	r5,r5,1
    242c:	183ffa1e 	bne	r3,zero,2418 <__alt_data_end+0xf8002418>
    2430:	f800283a 	ret
    2434:	0005883a 	mov	r2,zero
    2438:	f800283a 	ret
    243c:	00c00044 	movi	r3,1
    2440:	003ff406 	br	2414 <__alt_data_end+0xf8002414>

00002444 <__umodsi3>:
    2444:	2005883a 	mov	r2,r4
    2448:	2900122e 	bgeu	r5,r4,2494 <__umodsi3+0x50>
    244c:	28001116 	blt	r5,zero,2494 <__umodsi3+0x50>
    2450:	01800804 	movi	r6,32
    2454:	00c00044 	movi	r3,1
    2458:	00000206 	br	2464 <__umodsi3+0x20>
    245c:	30000c26 	beq	r6,zero,2490 <__umodsi3+0x4c>
    2460:	28000516 	blt	r5,zero,2478 <__umodsi3+0x34>
    2464:	294b883a 	add	r5,r5,r5
    2468:	31bfffc4 	addi	r6,r6,-1
    246c:	18c7883a 	add	r3,r3,r3
    2470:	293ffa36 	bltu	r5,r4,245c <__alt_data_end+0xf800245c>
    2474:	18000626 	beq	r3,zero,2490 <__umodsi3+0x4c>
    2478:	1806d07a 	srli	r3,r3,1
    247c:	11400136 	bltu	r2,r5,2484 <__umodsi3+0x40>
    2480:	1145c83a 	sub	r2,r2,r5
    2484:	280ad07a 	srli	r5,r5,1
    2488:	183ffb1e 	bne	r3,zero,2478 <__alt_data_end+0xf8002478>
    248c:	f800283a 	ret
    2490:	f800283a 	ret
    2494:	00c00044 	movi	r3,1
    2498:	003ff706 	br	2478 <__alt_data_end+0xf8002478>

0000249c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    249c:	deffff04 	addi	sp,sp,-4
    24a0:	01010034 	movhi	r4,1024
    24a4:	01400034 	movhi	r5,0
    24a8:	dfc00015 	stw	ra,0(sp)
    24ac:	21003304 	addi	r4,r4,204
    24b0:	294a1304 	addi	r5,r5,10316

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    24b4:	2140061e 	bne	r4,r5,24d0 <alt_load+0x34>
    24b8:	01000034 	movhi	r4,0
    24bc:	01400034 	movhi	r5,0
    24c0:	21000804 	addi	r4,r4,32
    24c4:	29400804 	addi	r5,r5,32
    24c8:	2140121e 	bne	r4,r5,2514 <alt_load+0x78>
    24cc:	00000b06 	br	24fc <alt_load+0x60>
    24d0:	00c10034 	movhi	r3,1024
    24d4:	18c07204 	addi	r3,r3,456
    24d8:	1907c83a 	sub	r3,r3,r4
    24dc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    24e0:	10fff526 	beq	r2,r3,24b8 <__alt_data_end+0xf80024b8>
    {
      *to++ = *from++;
    24e4:	114f883a 	add	r7,r2,r5
    24e8:	39c00017 	ldw	r7,0(r7)
    24ec:	110d883a 	add	r6,r2,r4
    24f0:	10800104 	addi	r2,r2,4
    24f4:	31c00015 	stw	r7,0(r6)
    24f8:	003ff906 	br	24e0 <__alt_data_end+0xf80024e0>
    24fc:	01010034 	movhi	r4,1024
    2500:	01400034 	movhi	r5,0
    2504:	21000004 	addi	r4,r4,0
    2508:	2949e004 	addi	r5,r5,10112

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    250c:	2140101e 	bne	r4,r5,2550 <alt_load+0xb4>
    2510:	00000b06 	br	2540 <alt_load+0xa4>
    2514:	00c00034 	movhi	r3,0
    2518:	18c00804 	addi	r3,r3,32
    251c:	1907c83a 	sub	r3,r3,r4
    2520:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2524:	10fff526 	beq	r2,r3,24fc <__alt_data_end+0xf80024fc>
    {
      *to++ = *from++;
    2528:	114f883a 	add	r7,r2,r5
    252c:	39c00017 	ldw	r7,0(r7)
    2530:	110d883a 	add	r6,r2,r4
    2534:	10800104 	addi	r2,r2,4
    2538:	31c00015 	stw	r7,0(r6)
    253c:	003ff906 	br	2524 <__alt_data_end+0xf8002524>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2540:	00027700 	call	2770 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2544:	dfc00017 	ldw	ra,0(sp)
    2548:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    254c:	00027741 	jmpi	2774 <alt_icache_flush_all>
    2550:	00c10034 	movhi	r3,1024
    2554:	18c03304 	addi	r3,r3,204
    2558:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    255c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2560:	18bff726 	beq	r3,r2,2540 <__alt_data_end+0xf8002540>
    {
      *to++ = *from++;
    2564:	114f883a 	add	r7,r2,r5
    2568:	39c00017 	ldw	r7,0(r7)
    256c:	110d883a 	add	r6,r2,r4
    2570:	10800104 	addi	r2,r2,4
    2574:	31c00015 	stw	r7,0(r6)
    2578:	003ff906 	br	2560 <__alt_data_end+0xf8002560>

0000257c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    257c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2580:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2584:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2588:	00026900 	call	2690 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    258c:	00026b00 	call	26b0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2590:	d1a00a17 	ldw	r6,-32728(gp)
    2594:	d1600b17 	ldw	r5,-32724(gp)
    2598:	d1200c17 	ldw	r4,-32720(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    259c:	dfc00017 	ldw	ra,0(sp)
    25a0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    25a4:	000019c1 	jmpi	19c <main>

000025a8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    25a8:	defffe04 	addi	sp,sp,-8
    25ac:	dc000015 	stw	r16,0(sp)
    25b0:	dfc00115 	stw	ra,4(sp)
    25b4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    25b8:	0001c080 	call	1c08 <strlen>
    25bc:	01010034 	movhi	r4,1024
    25c0:	000f883a 	mov	r7,zero
    25c4:	100d883a 	mov	r6,r2
    25c8:	800b883a 	mov	r5,r16
    25cc:	21007004 	addi	r4,r4,448
#else
    return fputs(str, stdout);
#endif
#endif
}
    25d0:	dfc00117 	ldw	ra,4(sp)
    25d4:	dc000017 	ldw	r16,0(sp)
    25d8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    25dc:	00026b41 	jmpi	26b4 <altera_avalon_jtag_uart_write>

000025e0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    25e0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    25e4:	00bfff84 	movi	r2,-2
    25e8:	2884703a 	and	r2,r5,r2
    25ec:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    25f0:	d0a00417 	ldw	r2,-32752(gp)
    25f4:	00ffff04 	movi	r3,-4
    25f8:	108000c4 	addi	r2,r2,3
    25fc:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2600:	00c20034 	movhi	r3,2048
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    2604:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2608:	1109883a 	add	r4,r2,r4
    260c:	18c00004 	addi	r3,r3,0
    2610:	1900032e 	bgeu	r3,r4,2620 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2614:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    2618:	00bfffc4 	movi	r2,-1
    261c:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    2620:	d1200415 	stw	r4,-32752(gp)
    2624:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    2628:	f800283a 	ret

0000262c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    262c:	00026e81 	jmpi	26e8 <alt_busy_sleep>

00002630 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    2630:	00800044 	movi	r2,1
    2634:	20800226 	beq	r4,r2,2640 <write+0x10>
    2638:	00800084 	movi	r2,2
    263c:	2080041e 	bne	r4,r2,2650 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    2640:	01010034 	movhi	r4,1024
    2644:	000f883a 	mov	r7,zero
    2648:	21007004 	addi	r4,r4,448
    264c:	00026b41 	jmpi	26b4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2650:	d0a00617 	ldw	r2,-32744(gp)
    2654:	10000926 	beq	r2,zero,267c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2658:	deffff04 	addi	sp,sp,-4
    265c:	dfc00015 	stw	ra,0(sp)
    2660:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2664:	00c01444 	movi	r3,81
    2668:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    266c:	00bfffc4 	movi	r2,-1
    2670:	dfc00017 	ldw	ra,0(sp)
    2674:	dec00104 	addi	sp,sp,4
    2678:	f800283a 	ret
    267c:	d0a00904 	addi	r2,gp,-32732
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    2680:	00c01444 	movi	r3,81
    2684:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    2688:	00bfffc4 	movi	r2,-1
    268c:	f800283a 	ret

00002690 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2690:	deffff04 	addi	sp,sp,-4
    2694:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    2698:	00027780 	call	2778 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    269c:	00800044 	movi	r2,1
    26a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    26a4:	dfc00017 	ldw	ra,0(sp)
    26a8:	dec00104 	addi	sp,sp,4
    26ac:	f800283a 	ret

000026b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    26b0:	f800283a 	ret

000026b4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    26b4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    26b8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    26bc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    26c0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    26c4:	2980072e 	bgeu	r5,r6,26e4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    26c8:	38c00037 	ldwio	r3,0(r7)
    26cc:	18ffffec 	andhi	r3,r3,65535
    26d0:	183ffc26 	beq	r3,zero,26c4 <__alt_data_end+0xf80026c4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    26d4:	28c00007 	ldb	r3,0(r5)
    26d8:	20c00035 	stwio	r3,0(r4)
    26dc:	29400044 	addi	r5,r5,1
    26e0:	003ff806 	br	26c4 <__alt_data_end+0xf80026c4>

  return count;
}
    26e4:	f800283a 	ret

000026e8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    26e8:	0142e8f4 	movhi	r5,2979
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    26ec:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    26f0:	297a2e84 	addi	r5,r5,-5958
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    26f4:	dc000015 	stw	r16,0(sp)
    26f8:	dfc00115 	stw	ra,4(sp)
    26fc:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2700:	00023e00 	call	23e0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2704:	10001026 	beq	r2,zero,2748 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2708:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    270c:	013d1774 	movhi	r4,62557
    2710:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2714:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2718:	2105d184 	addi	r4,r4,5958
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    271c:	297fffc4 	addi	r5,r5,-1
    2720:	283ffe1e 	bne	r5,zero,271c <__alt_data_end+0xf800271c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2724:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2728:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    272c:	18bffb16 	blt	r3,r2,271c <__alt_data_end+0xf800271c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2730:	014002c4 	movi	r5,11
    2734:	8009883a 	mov	r4,r16
    2738:	00017e80 	call	17e8 <__mulsi3>
    273c:	10bfffc4 	addi	r2,r2,-1
    2740:	103ffe1e 	bne	r2,zero,273c <__alt_data_end+0xf800273c>
    2744:	00000506 	br	275c <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2748:	014002c4 	movi	r5,11
    274c:	8009883a 	mov	r4,r16
    2750:	00017e80 	call	17e8 <__mulsi3>
    2754:	10bfffc4 	addi	r2,r2,-1
    2758:	00bffe16 	blt	zero,r2,2754 <__alt_data_end+0xf8002754>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    275c:	0005883a 	mov	r2,zero
    2760:	dfc00117 	ldw	ra,4(sp)
    2764:	dc000017 	ldw	r16,0(sp)
    2768:	dec00204 	addi	sp,sp,8
    276c:	f800283a 	ret

00002770 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2770:	f800283a 	ret

00002774 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2774:	f800283a 	ret

00002778 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2778:	000170fa 	wrctl	ienable,zero
    277c:	f800283a 	ret
